// Package airbyte provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package airbyte

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for AdvancedAuthAuthFlowType.
const (
	AdvancedAuthAuthFlowTypeOauth10 AdvancedAuthAuthFlowType = "oauth1.0"

	AdvancedAuthAuthFlowTypeOauth20 AdvancedAuthAuthFlowType = "oauth2.0"
)

// Defines values for AttemptStatus.
const (
	AttemptStatusFailed AttemptStatus = "failed"

	AttemptStatusRunning AttemptStatus = "running"

	AttemptStatusSucceeded AttemptStatus = "succeeded"
)

// Defines values for AuthSpecificationAuthType.
const (
	AuthSpecificationAuthTypeOauth20 AuthSpecificationAuthType = "oauth2.0"
)

// Defines values for CheckConnectionReadStatus.
const (
	CheckConnectionReadStatusFailed CheckConnectionReadStatus = "failed"

	CheckConnectionReadStatusSucceeded CheckConnectionReadStatus = "succeeded"
)

// Defines values for CheckOperationReadStatus.
const (
	CheckOperationReadStatusFailed CheckOperationReadStatus = "failed"

	CheckOperationReadStatusSucceeded CheckOperationReadStatus = "succeeded"
)

// Defines values for ConnectionScheduleTimeUnit.
const (
	ConnectionScheduleTimeUnitDays ConnectionScheduleTimeUnit = "days"

	ConnectionScheduleTimeUnitHours ConnectionScheduleTimeUnit = "hours"

	ConnectionScheduleTimeUnitMinutes ConnectionScheduleTimeUnit = "minutes"

	ConnectionScheduleTimeUnitMonths ConnectionScheduleTimeUnit = "months"

	ConnectionScheduleTimeUnitWeeks ConnectionScheduleTimeUnit = "weeks"
)

// Defines values for ConnectionStatus.
const (
	ConnectionStatusActive ConnectionStatus = "active"

	ConnectionStatusDeprecated ConnectionStatus = "deprecated"

	ConnectionStatusInactive ConnectionStatus = "inactive"
)

// Defines values for DbMigrationState.
const (
	DbMigrationStateAboveTarget DbMigrationState = "above_target"

	DbMigrationStateAvailable DbMigrationState = "available"

	DbMigrationStateBaseline DbMigrationState = "baseline"

	DbMigrationStateBelowBaseline DbMigrationState = "below_baseline"

	DbMigrationStateDeleted DbMigrationState = "deleted"

	DbMigrationStateFailed DbMigrationState = "failed"

	DbMigrationStateFutureFailed DbMigrationState = "future_failed"

	DbMigrationStateFutureSuccess DbMigrationState = "future_success"

	DbMigrationStateIgnored DbMigrationState = "ignored"

	DbMigrationStateMissingFailed DbMigrationState = "missing_failed"

	DbMigrationStateMissingSuccess DbMigrationState = "missing_success"

	DbMigrationStateOutOfOrder DbMigrationState = "out_of_order"

	DbMigrationStateOutdated DbMigrationState = "outdated"

	DbMigrationStatePending DbMigrationState = "pending"

	DbMigrationStateSuccess DbMigrationState = "success"

	DbMigrationStateSuperseded DbMigrationState = "superseded"

	DbMigrationStateUndone DbMigrationState = "undone"
)

// Defines values for DestinationSyncMode.
const (
	DestinationSyncModeAppend DestinationSyncMode = "append"

	DestinationSyncModeAppendDedup DestinationSyncMode = "append_dedup"

	DestinationSyncModeOverwrite DestinationSyncMode = "overwrite"
)

// Defines values for ImportReadStatus.
const (
	ImportReadStatusFailed ImportReadStatus = "failed"

	ImportReadStatusSucceeded ImportReadStatus = "succeeded"
)

// Defines values for JobConfigType.
const (
	JobConfigTypeCheckConnectionDestination JobConfigType = "check_connection_destination"

	JobConfigTypeCheckConnectionSource JobConfigType = "check_connection_source"

	JobConfigTypeDiscoverSchema JobConfigType = "discover_schema"

	JobConfigTypeGetSpec JobConfigType = "get_spec"

	JobConfigTypeResetConnection JobConfigType = "reset_connection"

	JobConfigTypeSync JobConfigType = "sync"
)

// Defines values for JobStatus.
const (
	JobStatusCancelled JobStatus = "cancelled"

	JobStatusFailed JobStatus = "failed"

	JobStatusIncomplete JobStatus = "incomplete"

	JobStatusPending JobStatus = "pending"

	JobStatusRunning JobStatus = "running"

	JobStatusSucceeded JobStatus = "succeeded"
)

// Defines values for LogType.
const (
	LogTypeScheduler LogType = "scheduler"

	LogTypeServer LogType = "server"
)

// Defines values for NamespaceDefinitionType.
const (
	NamespaceDefinitionTypeCustomformat NamespaceDefinitionType = "customformat"

	NamespaceDefinitionTypeDestination NamespaceDefinitionType = "destination"

	NamespaceDefinitionTypeSource NamespaceDefinitionType = "source"
)

// Defines values for NotificationReadStatus.
const (
	NotificationReadStatusFailed NotificationReadStatus = "failed"

	NotificationReadStatusSucceeded NotificationReadStatus = "succeeded"
)

// Defines values for NotificationType.
const (
	NotificationTypeSlack NotificationType = "slack"
)

// Defines values for OperatorNormalizationOption.
const (
	OperatorNormalizationOptionBasic OperatorNormalizationOption = "basic"
)

// Defines values for OperatorType.
const (
	OperatorTypeDbt OperatorType = "dbt"

	OperatorTypeNormalization OperatorType = "normalization"
)

// Defines values for SyncMode.
const (
	SyncModeFullRefresh SyncMode = "full_refresh"

	SyncModeIncremental SyncMode = "incremental"
)

// Defines values for UploadReadStatus.
const (
	UploadReadStatusFailed UploadReadStatus = "failed"

	UploadReadStatusSucceeded UploadReadStatus = "succeeded"
)

// AdvancedAuth defines model for AdvancedAuth.
type AdvancedAuth struct {
	AuthFlowType             *AdvancedAuthAuthFlowType `json:"authFlowType,omitempty"`
	OauthConfigSpecification *OAuthConfigSpecification `json:"oauthConfigSpecification,omitempty"`

	// Json Path to a field in the connectorSpecification that should exist for the advanced auth to be applicable.
	PredicateKey *[]string `json:"predicateKey,omitempty"`

	// Value of the predicate_key fields for the advanced auth to be applicable.
	PredicateValue *string `json:"predicateValue,omitempty"`
}

// AdvancedAuthAuthFlowType defines model for AdvancedAuth.AuthFlowType.
type AdvancedAuthAuthFlowType string

// Tarball Archive (.tar.gz) of Airbyte Configuration and Database
type AirbyteArchive string

// describes the available schema (catalog).
type AirbyteCatalog struct {
	Streams []AirbyteStreamAndConfiguration `json:"streams"`
}

// the immutable schema defined by the source
type AirbyteStream struct {
	// Path to the field that will be used to determine if a record is new or modified since the last sync. If not provided by the source, the end user will have to specify the comparable themselves.
	DefaultCursorField *[]string               `json:"defaultCursorField,omitempty"`
	JsonSchema         *map[string]interface{} `json:"jsonSchema,omitempty"`

	// Stream's name.
	Name string `json:"name"`

	// Optional Source-defined namespace. Airbyte streams from the same sources should have the same namespace. Currently only used by JDBC destinations to determine what schema to write to.
	Namespace *string `json:"namespace,omitempty"`

	// If the source defines the cursor field, then any other cursor field inputs will be ignored. If it does not, either the user_provided one is used, or the default one is used as a backup.
	SourceDefinedCursor *bool `json:"sourceDefinedCursor,omitempty"`

	// If the source defines the primary key, paths to the fields that will be used as a primary key. If not provided by the source, the end user will have to specify the primary key themselves.
	SourceDefinedPrimaryKey *[][]string `json:"sourceDefinedPrimaryKey,omitempty"`
	SupportedSyncModes      *[]SyncMode `json:"supportedSyncModes,omitempty"`
}

// each stream is split in two parts; the immutable schema from source and mutable configuration for destination
type AirbyteStreamAndConfiguration struct {
	// the mutable part of the stream to configure the destination
	Config *AirbyteStreamConfiguration `json:"config,omitempty"`

	// the immutable schema defined by the source
	Stream *AirbyteStream `json:"stream,omitempty"`
}

// the mutable part of the stream to configure the destination
type AirbyteStreamConfiguration struct {
	// Alias name to the stream to be used in the destination
	AliasName *string `json:"aliasName,omitempty"`

	// Path to the field that will be used to determine if a record is new or modified since the last sync. This field is REQUIRED if `sync_mode` is `incremental`. Otherwise it is ignored.
	CursorField         *[]string           `json:"cursorField,omitempty"`
	DestinationSyncMode DestinationSyncMode `json:"destinationSyncMode"`

	// Paths to the fields that will be used as primary key. This field is REQUIRED if `destination_sync_mode` is `*_dedup`. Otherwise it is ignored.
	PrimaryKey *[][]string `json:"primaryKey,omitempty"`
	Selected   *bool       `json:"selected,omitempty"`
	SyncMode   SyncMode    `json:"syncMode"`
}

// AttemptInfoRead defines model for AttemptInfoRead.
type AttemptInfoRead struct {
	Attempt AttemptRead `json:"attempt"`
	Logs    LogRead     `json:"logs"`
}

// AttemptRead defines model for AttemptRead.
type AttemptRead struct {
	BytesSynced   *int64                `json:"bytesSynced,omitempty"`
	CreatedAt     int64                 `json:"createdAt"`
	EndedAt       *int64                `json:"endedAt,omitempty"`
	Id            int64                 `json:"id"`
	RecordsSynced *int64                `json:"recordsSynced,omitempty"`
	Status        AttemptStatus         `json:"status"`
	StreamStats   *[]AttemptStreamStats `json:"streamStats,omitempty"`
	TotalStats    *AttemptStats         `json:"totalStats,omitempty"`
	UpdatedAt     int64                 `json:"updatedAt"`
}

// AttemptStats defines model for AttemptStats.
type AttemptStats struct {
	BytesEmitted         *int64 `json:"bytesEmitted,omitempty"`
	RecordsCommitted     *int64 `json:"recordsCommitted,omitempty"`
	RecordsEmitted       *int64 `json:"recordsEmitted,omitempty"`
	StateMessagesEmitted *int64 `json:"stateMessagesEmitted,omitempty"`
}

// AttemptStatus defines model for AttemptStatus.
type AttemptStatus string

// AttemptStreamStats defines model for AttemptStreamStats.
type AttemptStreamStats struct {
	Stats      AttemptStats `json:"stats"`
	StreamName string       `json:"streamName"`
}

// AuthSpecification defines model for AuthSpecification.
type AuthSpecification struct {
	AuthType *AuthSpecificationAuthType `json:"auth_type,omitempty"`

	// An object containing any metadata needed to describe this connector's Oauth flow
	Oauth2Specification *OAuth2Specification `json:"oauth2Specification,omitempty"`
}

// AuthSpecificationAuthType defines model for AuthSpecification.AuthType.
type AuthSpecificationAuthType string

// CheckConnectionRead defines model for CheckConnectionRead.
type CheckConnectionRead struct {
	JobInfo SynchronousJobRead        `json:"jobInfo"`
	Message *string                   `json:"message,omitempty"`
	Status  CheckConnectionReadStatus `json:"status"`
}

// CheckConnectionReadStatus defines model for CheckConnectionRead.Status.
type CheckConnectionReadStatus string

// CheckOperationRead defines model for CheckOperationRead.
type CheckOperationRead struct {
	Message *string                  `json:"message,omitempty"`
	Status  CheckOperationReadStatus `json:"status"`
}

// CheckOperationReadStatus defines model for CheckOperationRead.Status.
type CheckOperationReadStatus string

// CompleteDestinationOAuthRequest defines model for CompleteDestinationOAuthRequest.
type CompleteDestinationOAuthRequest struct {
	DestinationDefinitionId string `json:"destinationDefinitionId"`

	// OAuth specific blob.
	OAuthInputConfiguration *interface{} `json:"oAuthInputConfiguration,omitempty"`

	// The query parameters present in the redirect URL after a user granted consent e.g auth code
	QueryParams *CompleteDestinationOAuthRequest_QueryParams `json:"queryParams,omitempty"`

	// When completing OAuth flow to gain an access token, some API sometimes requires to verify that the app re-send the redirectUrl that was used when consent was given.
	RedirectUrl *string `json:"redirectUrl,omitempty"`
	WorkspaceId string  `json:"workspaceId"`
}

// The query parameters present in the redirect URL after a user granted consent e.g auth code
type CompleteDestinationOAuthRequest_QueryParams struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CompleteOAuthResponse defines model for CompleteOAuthResponse.
type CompleteOAuthResponse struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// CompleteSourceOauthRequest defines model for CompleteSourceOauthRequest.
type CompleteSourceOauthRequest struct {
	// OAuth specific blob.
	OAuthInputConfiguration *interface{} `json:"oAuthInputConfiguration,omitempty"`

	// The query parameters present in the redirect URL after a user granted consent e.g auth code
	QueryParams *CompleteSourceOauthRequest_QueryParams `json:"queryParams,omitempty"`

	// When completing OAuth flow to gain an access token, some API sometimes requires to verify that the app re-send the redirectUrl that was used when consent was given.
	RedirectUrl        *string `json:"redirectUrl,omitempty"`
	SourceDefinitionId string  `json:"sourceDefinitionId"`
	WorkspaceId        string  `json:"workspaceId"`
}

// The query parameters present in the redirect URL after a user granted consent e.g auth code
type CompleteSourceOauthRequest_QueryParams struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// ConnectionCreate defines model for ConnectionCreate.
type ConnectionCreate struct {
	DestinationId string `json:"destinationId"`

	// Optional name of the connection
	Name *string `json:"name,omitempty"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string        `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId `json:"operationIds,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`
	SourceId string              `json:"sourceId"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// describes the available schema (catalog).
	SyncCatalog *AirbyteCatalog `json:"syncCatalog,omitempty"`
}

// ConnectionIdRequestBody defines model for ConnectionIdRequestBody.
type ConnectionIdRequestBody struct {
	ConnectionId string `json:"connectionId"`
}

// ConnectionRead defines model for ConnectionRead.
type ConnectionRead struct {
	ConnectionId  string `json:"connectionId"`
	DestinationId string `json:"destinationId"`
	Name          string `json:"name"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string        `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId `json:"operationIds,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`
	Schedule             *struct {
		// Embedded struct due to allOf(#/components/schemas/ConnectionSchedule)
		ConnectionSchedule `yaml:",inline"`
	} `json:"schedule"`
	SourceId string `json:"sourceId"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// describes the available schema (catalog).
	SyncCatalog AirbyteCatalog `json:"syncCatalog"`
}

// ConnectionReadList defines model for ConnectionReadList.
type ConnectionReadList struct {
	Connections []ConnectionRead `json:"connections"`
}

// if null, then no schedule is set.
type ConnectionSchedule struct {
	TimeUnit ConnectionScheduleTimeUnit `json:"timeUnit"`
	Units    int64                      `json:"units"`
}

// ConnectionScheduleTimeUnit defines model for ConnectionSchedule.TimeUnit.
type ConnectionScheduleTimeUnit string

// ConnectionSearch defines model for ConnectionSearch.
type ConnectionSearch struct {
	ConnectionId  *string            `json:"connectionId,omitempty"`
	Destination   *DestinationSearch `json:"destination,omitempty"`
	DestinationId *string            `json:"destinationId,omitempty"`
	Name          *string            `json:"name,omitempty"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string `json:"namespaceFormat,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`
	Source   *SourceSearch       `json:"source,omitempty"`
	SourceId *string             `json:"sourceId,omitempty"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status *ConnectionStatus `json:"status,omitempty"`
}

// ConnectionState defines model for ConnectionState.
type ConnectionState struct {
	ConnectionId string                  `json:"connectionId"`
	State        *map[string]interface{} `json:"state,omitempty"`
}

// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
type ConnectionStatus string

// ConnectionUpdate defines model for ConnectionUpdate.
type ConnectionUpdate struct {
	ConnectionId string `json:"connectionId"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string        `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId `json:"operationIds,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// describes the available schema (catalog).
	SyncCatalog AirbyteCatalog `json:"syncCatalog"`
}

// DbMigrationExecutionRead defines model for DbMigrationExecutionRead.
type DbMigrationExecutionRead struct {
	ExecutedMigrations *[]DbMigrationRead `json:"executedMigrations,omitempty"`
	InitialVersion     *string            `json:"initialVersion,omitempty"`
	TargetVersion      *string            `json:"targetVersion,omitempty"`
}

// DbMigrationRead defines model for DbMigrationRead.
type DbMigrationRead struct {
	MigratedAt           *int64            `json:"migratedAt,omitempty"`
	MigratedBy           *string           `json:"migratedBy,omitempty"`
	MigrationDescription string            `json:"migrationDescription"`
	MigrationScript      *string           `json:"migrationScript,omitempty"`
	MigrationState       *DbMigrationState `json:"migrationState,omitempty"`
	MigrationType        string            `json:"migrationType"`
	MigrationVersion     string            `json:"migrationVersion"`
}

// DbMigrationReadList defines model for DbMigrationReadList.
type DbMigrationReadList struct {
	Migrations *[]DbMigrationRead `json:"migrations,omitempty"`
}

// DbMigrationRequestBody defines model for DbMigrationRequestBody.
type DbMigrationRequestBody struct {
	Database string `json:"database"`
}

// DbMigrationState defines model for DbMigrationState.
type DbMigrationState string

// DestinationCoreConfig defines model for DestinationCoreConfig.
type DestinationCoreConfig struct {
	// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	DestinationDefinitionId string      `json:"destinationDefinitionId"`
}

// DestinationCreate defines model for DestinationCreate.
type DestinationCreate struct {
	// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	DestinationDefinitionId string      `json:"destinationDefinitionId"`
	Name                    string      `json:"name"`
	WorkspaceId             string      `json:"workspaceId"`
}

// DestinationDefinitionCreate defines model for DestinationDefinitionCreate.
type DestinationDefinitionCreate struct {
	DockerImageTag   string  `json:"dockerImageTag"`
	DockerRepository string  `json:"dockerRepository"`
	DocumentationUrl string  `json:"documentationUrl"`
	Icon             *string `json:"icon,omitempty"`
	Name             string  `json:"name"`
}

// DestinationDefinitionIdRequestBody defines model for DestinationDefinitionIdRequestBody.
type DestinationDefinitionIdRequestBody struct {
	DestinationDefinitionId string `json:"destinationDefinitionId"`
}

// DestinationDefinitionRead defines model for DestinationDefinitionRead.
type DestinationDefinitionRead struct {
	DestinationDefinitionId string  `json:"destinationDefinitionId"`
	DockerImageTag          string  `json:"dockerImageTag"`
	DockerRepository        string  `json:"dockerRepository"`
	DocumentationUrl        string  `json:"documentationUrl"`
	Icon                    *string `json:"icon,omitempty"`
	Name                    string  `json:"name"`
}

// DestinationDefinitionReadList defines model for DestinationDefinitionReadList.
type DestinationDefinitionReadList struct {
	DestinationDefinitions []DestinationDefinitionRead `json:"destinationDefinitions"`
}

// DestinationDefinitionSpecificationRead defines model for DestinationDefinitionSpecificationRead.
type DestinationDefinitionSpecificationRead struct {
	AdvancedAuth      *AdvancedAuth      `json:"advancedAuth,omitempty"`
	AuthSpecification *AuthSpecification `json:"authSpecification,omitempty"`

	// The specification for what values are required to configure the destinationDefinition.
	ConnectionSpecification       *interface{}           `json:"connectionSpecification,omitempty"`
	DestinationDefinitionId       string                 `json:"destinationDefinitionId"`
	DocumentationUrl              *string                `json:"documentationUrl,omitempty"`
	JobInfo                       SynchronousJobRead     `json:"jobInfo"`
	SupportedDestinationSyncModes *[]DestinationSyncMode `json:"supportedDestinationSyncModes,omitempty"`
	SupportsDbt                   *bool                  `json:"supportsDbt,omitempty"`
	SupportsNormalization         *bool                  `json:"supportsNormalization,omitempty"`
}

// DestinationDefinitionUpdate defines model for DestinationDefinitionUpdate.
type DestinationDefinitionUpdate struct {
	DestinationDefinitionId string  `json:"destinationDefinitionId"`
	DockerImageTag          *string `json:"dockerImageTag,omitempty"`
}

// DestinationIdRequestBody defines model for DestinationIdRequestBody.
type DestinationIdRequestBody struct {
	DestinationId string `json:"destinationId"`
}

// DestinationOauthConsentRequest defines model for DestinationOauthConsentRequest.
type DestinationOauthConsentRequest struct {
	DestinationDefinitionId string `json:"destinationDefinitionId"`

	// OAuth specific blob.
	OAuthInputConfiguration *interface{} `json:"oAuthInputConfiguration,omitempty"`

	// The url to redirect to after getting the user consent
	RedirectUrl string `json:"redirectUrl"`
	WorkspaceId string `json:"workspaceId"`
}

// DestinationRead defines model for DestinationRead.
type DestinationRead struct {
	// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	DestinationDefinitionId string      `json:"destinationDefinitionId"`
	DestinationId           string      `json:"destinationId"`
	DestinationName         string      `json:"destinationName"`
	Name                    string      `json:"name"`
	WorkspaceId             string      `json:"workspaceId"`
}

// DestinationReadList defines model for DestinationReadList.
type DestinationReadList struct {
	Destinations []DestinationRead `json:"destinations"`
}

// DestinationSearch defines model for DestinationSearch.
type DestinationSearch struct {
	// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration *interface{} `json:"connectionConfiguration,omitempty"`
	DestinationDefinitionId *string      `json:"destinationDefinitionId,omitempty"`
	DestinationId           *string      `json:"destinationId,omitempty"`
	DestinationName         *string      `json:"destinationName,omitempty"`
	Name                    *string      `json:"name,omitempty"`
	WorkspaceId             *string      `json:"workspaceId,omitempty"`
}

// DestinationSyncMode defines model for DestinationSyncMode.
type DestinationSyncMode string

// DestinationUpdate defines model for DestinationUpdate.
type DestinationUpdate struct {
	// The values required to configure the destination. The schema for this must match the schema return by destination_definition_specifications/get for the destinationDefinition.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	DestinationId           string      `json:"destinationId"`
	Name                    string      `json:"name"`
}

// HealthCheckRead defines model for HealthCheckRead.
type HealthCheckRead struct {
	Available bool `json:"available"`
}

// ImportRead defines model for ImportRead.
type ImportRead struct {
	Reason *string          `json:"reason,omitempty"`
	Status ImportReadStatus `json:"status"`
}

// ImportReadStatus defines model for ImportRead.Status.
type ImportReadStatus string

// ImportRequestBody defines model for ImportRequestBody.
type ImportRequestBody struct {
	ResourceId  string `json:"resourceId"`
	WorkspaceId string `json:"workspaceId"`
}

// InvalidInputExceptionInfo defines model for InvalidInputExceptionInfo.
type InvalidInputExceptionInfo struct {
	ExceptionClassName *string                `json:"exceptionClassName,omitempty"`
	ExceptionStack     *[]string              `json:"exceptionStack,omitempty"`
	Message            string                 `json:"message"`
	ValidationErrors   []InvalidInputProperty `json:"validationErrors"`
}

// InvalidInputProperty defines model for InvalidInputProperty.
type InvalidInputProperty struct {
	InvalidValue *string `json:"invalidValue,omitempty"`
	Message      *string `json:"message,omitempty"`
	PropertyPath string  `json:"propertyPath"`
}

// JobConfigType defines model for JobConfigType.
type JobConfigType string

// JobDebugInfoRead defines model for JobDebugInfoRead.
type JobDebugInfoRead struct {
	Attempts []AttemptInfoRead `json:"attempts"`
	Job      JobDebugRead      `json:"job"`
}

// JobDebugRead defines model for JobDebugRead.
type JobDebugRead struct {
	AirbyteVersion        string                    `json:"airbyteVersion"`
	ConfigId              string                    `json:"configId"`
	ConfigType            JobConfigType             `json:"configType"`
	DestinationDefinition DestinationDefinitionRead `json:"destinationDefinition"`
	Id                    int64                     `json:"id"`
	SourceDefinition      SourceDefinitionRead      `json:"sourceDefinition"`
	Status                JobStatus                 `json:"status"`
}

// JobIdRequestBody defines model for JobIdRequestBody.
type JobIdRequestBody struct {
	Id int64 `json:"id"`
}

// JobInfoRead defines model for JobInfoRead.
type JobInfoRead struct {
	Attempts []AttemptInfoRead `json:"attempts"`
	Job      JobRead           `json:"job"`
}

// JobListRequestBody defines model for JobListRequestBody.
type JobListRequestBody struct {
	ConfigId    string          `json:"configId"`
	ConfigTypes []JobConfigType `json:"configTypes"`
	Pagination  *Pagination     `json:"pagination,omitempty"`
}

// JobRead defines model for JobRead.
type JobRead struct {
	ConfigId   string        `json:"configId"`
	ConfigType JobConfigType `json:"configType"`
	CreatedAt  int64         `json:"createdAt"`
	Id         int64         `json:"id"`
	Status     JobStatus     `json:"status"`
	UpdatedAt  int64         `json:"updatedAt"`
}

// JobReadList defines model for JobReadList.
type JobReadList struct {
	Jobs []JobWithAttemptsRead `json:"jobs"`
}

// JobStatus defines model for JobStatus.
type JobStatus string

// JobWithAttemptsRead defines model for JobWithAttemptsRead.
type JobWithAttemptsRead struct {
	Attempts *[]AttemptRead `json:"attempts,omitempty"`
	Job      *JobRead       `json:"job,omitempty"`
}

// KnownExceptionInfo defines model for KnownExceptionInfo.
type KnownExceptionInfo struct {
	ExceptionClassName          *string   `json:"exceptionClassName,omitempty"`
	ExceptionStack              *[]string `json:"exceptionStack,omitempty"`
	Message                     string    `json:"message"`
	RootCauseExceptionClassName *string   `json:"rootCauseExceptionClassName,omitempty"`
	RootCauseExceptionStack     *[]string `json:"rootCauseExceptionStack,omitempty"`
}

// LogRead defines model for LogRead.
type LogRead struct {
	LogLines []string `json:"logLines"`
}

// type/source of logs produced
type LogType string

// LogsRequestBody defines model for LogsRequestBody.
type LogsRequestBody struct {
	// type/source of logs produced
	LogType LogType `json:"logType"`
}

// Method used for computing final namespace in destination
type NamespaceDefinitionType string

// NotFoundKnownExceptionInfo defines model for NotFoundKnownExceptionInfo.
type NotFoundKnownExceptionInfo struct {
	ExceptionClassName          *string   `json:"exceptionClassName,omitempty"`
	ExceptionStack              *[]string `json:"exceptionStack,omitempty"`
	Id                          *string   `json:"id,omitempty"`
	Message                     string    `json:"message"`
	RootCauseExceptionClassName *string   `json:"rootCauseExceptionClassName,omitempty"`
	RootCauseExceptionStack     *[]string `json:"rootCauseExceptionStack,omitempty"`
}

// Notification defines model for Notification.
type Notification struct {
	NotificationType   NotificationType                `json:"notificationType"`
	SendOnFailure      bool                            `json:"sendOnFailure"`
	SendOnSuccess      bool                            `json:"sendOnSuccess"`
	SlackConfiguration *SlackNotificationConfiguration `json:"slackConfiguration,omitempty"`
}

// NotificationRead defines model for NotificationRead.
type NotificationRead struct {
	Message *string                `json:"message,omitempty"`
	Status  NotificationReadStatus `json:"status"`
}

// NotificationReadStatus defines model for NotificationRead.Status.
type NotificationReadStatus string

// NotificationType defines model for NotificationType.
type NotificationType string

// An object containing any metadata needed to describe this connector's Oauth flow
type OAuth2Specification struct {
	// Pointers to the fields in the rootObject needed to obtain the initial refresh/access tokens for the OAuth flow. Each inner array represents the path in the rootObject of the referenced field. For example. Assume the rootObject contains params 'app_secret', 'app_id' which are needed to get the initial refresh token. If they are not nested in the rootObject, then the array would look like this [['app_secret'], ['app_id']] If they are nested inside an object called 'auth_params' then this array would be [['auth_params', 'app_secret'], ['auth_params', 'app_id']]
	OauthFlowInitParameters [][]string `json:"oauthFlowInitParameters"`

	// Pointers to the fields in the rootObject which can be populated from successfully completing the oauth flow using the init parameters. This is typically a refresh/access token. Each inner array represents the path in the rootObject of the referenced field.
	OauthFlowOutputParameters [][]string `json:"oauthFlowOutputParameters"`

	// A list of strings representing a pointer to the root object which contains any oauth parameters in the ConnectorSpecification.
	// Examples:
	// if oauth parameters were contained inside the top level, rootObject=[] If they were nested inside another object {'credentials': {'app_id' etc...}, rootObject=['credentials'] If they were inside a oneOf {'switch': {oneOf: [{client_id...}, {non_oauth_param]}},  rootObject=['switch', 0]
	RootObject []interface{} `json:"rootObject"`
}

// OAuthConfigSpecification defines model for OAuthConfigSpecification.
type OAuthConfigSpecification struct {
	// OAuth specific blob.
	CompleteOAuthOutputSpecification *interface{} `json:"completeOAuthOutputSpecification,omitempty"`

	// OAuth specific blob.
	CompleteOAuthServerInputSpecification *interface{} `json:"completeOAuthServerInputSpecification,omitempty"`

	// OAuth specific blob.
	CompleteOAuthServerOutputSpecification *interface{} `json:"completeOAuthServerOutputSpecification,omitempty"`

	// OAuth specific blob.
	OauthUserInputFromConnectorConfigSpecification *interface{} `json:"oauthUserInputFromConnectorConfigSpecification,omitempty"`
}

// OAuthConsentRead defines model for OAuthConsentRead.
type OAuthConsentRead struct {
	ConsentUrl string `json:"consentUrl"`
}

// OperationCreate defines model for OperationCreate.
type OperationCreate struct {
	Name                  string                `json:"name"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
	WorkspaceId           string                `json:"workspaceId"`
}

// OperationId defines model for OperationId.
type OperationId string

// OperationIdRequestBody defines model for OperationIdRequestBody.
type OperationIdRequestBody struct {
	OperationId string `json:"OperationId"`
}

// OperationRead defines model for OperationRead.
type OperationRead struct {
	Name                  string                `json:"name"`
	OperationId           string                `json:"operationId"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
	WorkspaceId           string                `json:"workspaceId"`
}

// OperationReadList defines model for OperationReadList.
type OperationReadList struct {
	Operations []OperationRead `json:"operations"`
}

// OperationUpdate defines model for OperationUpdate.
type OperationUpdate struct {
	Name                  string                `json:"name"`
	OperationId           string                `json:"operationId"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
}

// OperatorConfiguration defines model for OperatorConfiguration.
type OperatorConfiguration struct {
	Dbt           *OperatorDbt           `json:"dbt,omitempty"`
	Normalization *OperatorNormalization `json:"normalization,omitempty"`
	OperatorType  OperatorType           `json:"operatorType"`
}

// OperatorDbt defines model for OperatorDbt.
type OperatorDbt struct {
	DbtArguments  *string `json:"dbtArguments,omitempty"`
	DockerImage   *string `json:"dockerImage,omitempty"`
	GitRepoBranch *string `json:"gitRepoBranch,omitempty"`
	GitRepoUrl    string  `json:"gitRepoUrl"`
}

// OperatorNormalization defines model for OperatorNormalization.
type OperatorNormalization struct {
	Option *OperatorNormalizationOption `json:"option,omitempty"`
}

// OperatorNormalizationOption defines model for OperatorNormalization.Option.
type OperatorNormalizationOption string

// OperatorType defines model for OperatorType.
type OperatorType string

// Pagination defines model for Pagination.
type Pagination struct {
	PageSize  *int `json:"pageSize,omitempty"`
	RowOffset *int `json:"rowOffset,omitempty"`
}

// optional resource requirements to run workers (blank for unbounded allocations)
type ResourceRequirements struct {
	CpuLimit      *string `json:"cpu_limit,omitempty"`
	CpuRequest    *string `json:"cpu_request,omitempty"`
	MemoryLimit   *string `json:"memory_limit,omitempty"`
	MemoryRequest *string `json:"memory_request,omitempty"`
}

// SetInstancewideDestinationOauthParamsRequestBody defines model for SetInstancewideDestinationOauthParamsRequestBody.
type SetInstancewideDestinationOauthParamsRequestBody struct {
	DestinationDefinitionId string                                                  `json:"destinationDefinitionId"`
	Params                  SetInstancewideDestinationOauthParamsRequestBody_Params `json:"params"`
}

// SetInstancewideDestinationOauthParamsRequestBody_Params defines model for SetInstancewideDestinationOauthParamsRequestBody.Params.
type SetInstancewideDestinationOauthParamsRequestBody_Params struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SetInstancewideSourceOauthParamsRequestBody defines model for SetInstancewideSourceOauthParamsRequestBody.
type SetInstancewideSourceOauthParamsRequestBody struct {
	Params             SetInstancewideSourceOauthParamsRequestBody_Params `json:"params"`
	SourceDefinitionId string                                             `json:"sourceDefinitionId"`
}

// SetInstancewideSourceOauthParamsRequestBody_Params defines model for SetInstancewideSourceOauthParamsRequestBody.Params.
type SetInstancewideSourceOauthParamsRequestBody_Params struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// SlackNotificationConfiguration defines model for SlackNotificationConfiguration.
type SlackNotificationConfiguration struct {
	Webhook string `json:"webhook"`
}

// SlugRequestBody defines model for SlugRequestBody.
type SlugRequestBody struct {
	Slug string `json:"slug"`
}

// SourceCoreConfig defines model for SourceCoreConfig.
type SourceCoreConfig struct {
	// The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	SourceDefinitionId      string      `json:"sourceDefinitionId"`
}

// SourceCreate defines model for SourceCreate.
type SourceCreate struct {
	// The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	Name                    string      `json:"name"`
	SourceDefinitionId      string      `json:"sourceDefinitionId"`
	WorkspaceId             string      `json:"workspaceId"`
}

// SourceDefinitionCreate defines model for SourceDefinitionCreate.
type SourceDefinitionCreate struct {
	DockerImageTag   string  `json:"dockerImageTag"`
	DockerRepository string  `json:"dockerRepository"`
	DocumentationUrl string  `json:"documentationUrl"`
	Icon             *string `json:"icon,omitempty"`
	Name             string  `json:"name"`
}

// SourceDefinitionIdRequestBody defines model for SourceDefinitionIdRequestBody.
type SourceDefinitionIdRequestBody struct {
	SourceDefinitionId string `json:"sourceDefinitionId"`
}

// SourceDefinitionRead defines model for SourceDefinitionRead.
type SourceDefinitionRead struct {
	DockerImageTag     string  `json:"dockerImageTag"`
	DockerRepository   string  `json:"dockerRepository"`
	DocumentationUrl   *string `json:"documentationUrl,omitempty"`
	Icon               *string `json:"icon,omitempty"`
	Name               string  `json:"name"`
	SourceDefinitionId string  `json:"sourceDefinitionId"`
}

// SourceDefinitionReadList defines model for SourceDefinitionReadList.
type SourceDefinitionReadList struct {
	SourceDefinitions []SourceDefinitionRead `json:"sourceDefinitions"`
}

// SourceDefinitionSpecificationRead defines model for SourceDefinitionSpecificationRead.
type SourceDefinitionSpecificationRead struct {
	AdvancedAuth      *AdvancedAuth      `json:"advancedAuth,omitempty"`
	AuthSpecification *AuthSpecification `json:"authSpecification,omitempty"`

	// The specification for what values are required to configure the sourceDefinition.
	ConnectionSpecification *map[string]interface{} `json:"connectionSpecification,omitempty"`
	DocumentationUrl        *string                 `json:"documentationUrl,omitempty"`
	JobInfo                 SynchronousJobRead      `json:"jobInfo"`
	SourceDefinitionId      string                  `json:"sourceDefinitionId"`
}

// Update the SourceDefinition. Currently, the only allowed attribute to update is the default docker image version.
type SourceDefinitionUpdate struct {
	DockerImageTag     string `json:"dockerImageTag"`
	SourceDefinitionId string `json:"sourceDefinitionId"`
}

// Returns the results of a discover catalog job. If the job was not successful, the catalog field will not be present. jobInfo will aways be present and its status be used to determine if the job was successful or not.
type SourceDiscoverSchemaRead struct {
	// describes the available schema (catalog).
	Catalog *AirbyteCatalog    `json:"catalog,omitempty"`
	JobInfo SynchronousJobRead `json:"jobInfo"`
}

// SourceIdRequestBody defines model for SourceIdRequestBody.
type SourceIdRequestBody struct {
	SourceId string `json:"sourceId"`
}

// SourceOauthConsentRequest defines model for SourceOauthConsentRequest.
type SourceOauthConsentRequest struct {
	// OAuth specific blob.
	OAuthInputConfiguration *interface{} `json:"oAuthInputConfiguration,omitempty"`

	// The url to redirect to after getting the user consent
	RedirectUrl        string `json:"redirectUrl"`
	SourceDefinitionId string `json:"sourceDefinitionId"`
	WorkspaceId        string `json:"workspaceId"`
}

// SourceRead defines model for SourceRead.
type SourceRead struct {
	// The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	Name                    string      `json:"name"`
	SourceDefinitionId      string      `json:"sourceDefinitionId"`
	SourceId                string      `json:"sourceId"`
	SourceName              string      `json:"sourceName"`
	WorkspaceId             string      `json:"workspaceId"`
}

// SourceReadList defines model for SourceReadList.
type SourceReadList struct {
	Sources []SourceRead `json:"sources"`
}

// SourceSearch defines model for SourceSearch.
type SourceSearch struct {
	// The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration *interface{} `json:"connectionConfiguration,omitempty"`
	Name                    *string      `json:"name,omitempty"`
	SourceDefinitionId      *string      `json:"sourceDefinitionId,omitempty"`
	SourceId                *string      `json:"sourceId,omitempty"`
	SourceName              *string      `json:"sourceName,omitempty"`
	WorkspaceId             *string      `json:"workspaceId,omitempty"`
}

// SourceUpdate defines model for SourceUpdate.
type SourceUpdate struct {
	// The values required to configure the source. The schema for this must match the schema return by source_definition_specifications/get for the source.
	ConnectionConfiguration interface{} `json:"connectionConfiguration"`
	Name                    string      `json:"name"`
	SourceId                string      `json:"sourceId"`
}

// SyncMode defines model for SyncMode.
type SyncMode string

// SynchronousJobRead defines model for SynchronousJobRead.
type SynchronousJobRead struct {
	// only present if a config id was provided.
	ConfigId   *string       `json:"configId,omitempty"`
	ConfigType JobConfigType `json:"configType"`
	CreatedAt  int64         `json:"createdAt"`
	EndedAt    int64         `json:"endedAt"`
	Id         string        `json:"id"`
	Logs       *LogRead      `json:"logs,omitempty"`
	Succeeded  bool          `json:"succeeded"`
}

// UploadRead defines model for UploadRead.
type UploadRead struct {
	ResourceId *string          `json:"resourceId,omitempty"`
	Status     UploadReadStatus `json:"status"`
}

// UploadReadStatus defines model for UploadRead.Status.
type UploadReadStatus string

// WebBackendConnectionCreate defines model for WebBackendConnectionCreate.
type WebBackendConnectionCreate struct {
	DestinationId string `json:"destinationId"`

	// Optional name of the connection
	Name *string `json:"name,omitempty"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string            `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId     `json:"operationIds,omitempty"`
	Operations      *[]OperationCreate `json:"operations,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`
	SourceId string              `json:"sourceId"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// describes the available schema (catalog).
	SyncCatalog *AirbyteCatalog `json:"syncCatalog,omitempty"`
}

// WebBackendConnectionRead defines model for WebBackendConnectionRead.
type WebBackendConnectionRead struct {
	ConnectionId  string          `json:"connectionId"`
	Destination   DestinationRead `json:"destination"`
	DestinationId string          `json:"destinationId"`
	IsSyncing     bool            `json:"isSyncing"`

	// epoch time of the latest sync job. null if no sync job has taken place.
	LatestSyncJobCreatedAt *int64     `json:"latestSyncJobCreatedAt,omitempty"`
	LatestSyncJobStatus    *JobStatus `json:"latestSyncJobStatus,omitempty"`
	Name                   string     `json:"name"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string          `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId   `json:"operationIds,omitempty"`
	Operations      *[]OperationRead `json:"operations,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`
	Source   SourceRead          `json:"source"`
	SourceId string              `json:"sourceId"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// describes the available schema (catalog).
	SyncCatalog AirbyteCatalog `json:"syncCatalog"`
}

// WebBackendConnectionReadList defines model for WebBackendConnectionReadList.
type WebBackendConnectionReadList struct {
	Connections []WebBackendConnectionRead `json:"connections"`
}

// WebBackendConnectionRequestBody defines model for WebBackendConnectionRequestBody.
type WebBackendConnectionRequestBody struct {
	ConnectionId         string `json:"connectionId"`
	WithRefreshedCatalog *bool  `json:"withRefreshedCatalog,omitempty"`
}

// WebBackendConnectionSearch defines model for WebBackendConnectionSearch.
type WebBackendConnectionSearch struct {
	ConnectionId  *string            `json:"connectionId,omitempty"`
	Destination   *DestinationSearch `json:"destination,omitempty"`
	DestinationId *string            `json:"destinationId,omitempty"`
	Name          *string            `json:"name,omitempty"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string `json:"namespaceFormat,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`
	Source   *SourceSearch       `json:"source,omitempty"`
	SourceId *string             `json:"sourceId,omitempty"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status *ConnectionStatus `json:"status,omitempty"`
}

// WebBackendConnectionUpdate defines model for WebBackendConnectionUpdate.
type WebBackendConnectionUpdate struct {
	ConnectionId string `json:"connectionId"`

	// Method used for computing final namespace in destination
	NamespaceDefinition *NamespaceDefinitionType `json:"namespaceDefinition,omitempty"`

	// Used when namespaceDefinition is 'customformat'. If blank then behaves like namespaceDefinition = 'destination'. If "${SOURCE_NAMESPACE}" then behaves like namespaceDefinition = 'source'.
	NamespaceFormat *string                              `json:"namespaceFormat,omitempty"`
	OperationIds    *[]OperationId                       `json:"operationIds,omitempty"`
	Operations      *[]WebBackendOperationCreateOrUpdate `json:"operations,omitempty"`

	// Prefix that will be prepended to the name of each stream when it is written to the destination.
	Prefix *string `json:"prefix,omitempty"`

	// optional resource requirements to run workers (blank for unbounded allocations)
	ResourceRequirements *ResourceRequirements `json:"resourceRequirements,omitempty"`

	// if null, then no schedule is set.
	Schedule *ConnectionSchedule `json:"schedule,omitempty"`

	// Active means that data is flowing through the connection. Inactive means it is not. Deprecated means the connection is off and cannot be re-activated. the schema field describes the elements of the schema that will be synced.
	Status ConnectionStatus `json:"status"`

	// describes the available schema (catalog).
	SyncCatalog          AirbyteCatalog `json:"syncCatalog"`
	WithRefreshedCatalog *bool          `json:"withRefreshedCatalog,omitempty"`
}

// WebBackendOperationCreateOrUpdate defines model for WebBackendOperationCreateOrUpdate.
type WebBackendOperationCreateOrUpdate struct {
	Name                  string                `json:"name"`
	OperationId           *string               `json:"operationId,omitempty"`
	OperatorConfiguration OperatorConfiguration `json:"operatorConfiguration"`
	WorkspaceId           string                `json:"workspaceId"`
}

// WorkspaceCreate defines model for WorkspaceCreate.
type WorkspaceCreate struct {
	AnonymousDataCollection *bool                `json:"anonymousDataCollection,omitempty"`
	DisplaySetupWizard      *bool                `json:"displaySetupWizard,omitempty"`
	Email                   *openapi_types.Email `json:"email,omitempty"`
	Name                    string               `json:"name"`
	News                    *bool                `json:"news,omitempty"`
	Notifications           *[]Notification      `json:"notifications,omitempty"`
	SecurityUpdates         *bool                `json:"securityUpdates,omitempty"`
}

// WorkspaceGiveFeedback defines model for WorkspaceGiveFeedback.
type WorkspaceGiveFeedback struct {
	WorkspaceId string `json:"workspaceId"`
}

// WorkspaceIdRequestBody defines model for WorkspaceIdRequestBody.
type WorkspaceIdRequestBody struct {
	WorkspaceId string `json:"workspaceId"`
}

// WorkspaceRead defines model for WorkspaceRead.
type WorkspaceRead struct {
	AnonymousDataCollection *bool                `json:"anonymousDataCollection,omitempty"`
	CustomerId              string               `json:"customerId"`
	DisplaySetupWizard      *bool                `json:"displaySetupWizard,omitempty"`
	Email                   *openapi_types.Email `json:"email,omitempty"`
	FeedbackDone            *bool                `json:"feedbackDone,omitempty"`
	FirstCompletedSync      *bool                `json:"firstCompletedSync,omitempty"`
	InitialSetupComplete    bool                 `json:"initialSetupComplete"`
	Name                    string               `json:"name"`
	News                    *bool                `json:"news,omitempty"`
	Notifications           *[]Notification      `json:"notifications,omitempty"`
	SecurityUpdates         *bool                `json:"securityUpdates,omitempty"`
	Slug                    string               `json:"slug"`
	WorkspaceId             string               `json:"workspaceId"`
}

// WorkspaceReadList defines model for WorkspaceReadList.
type WorkspaceReadList struct {
	Workspaces []WorkspaceRead `json:"workspaces"`
}

// WorkspaceUpdate defines model for WorkspaceUpdate.
type WorkspaceUpdate struct {
	AnonymousDataCollection bool                 `json:"anonymousDataCollection"`
	DisplaySetupWizard      *bool                `json:"displaySetupWizard,omitempty"`
	Email                   *openapi_types.Email `json:"email,omitempty"`
	InitialSetupComplete    bool                 `json:"initialSetupComplete"`
	News                    bool                 `json:"news"`
	Notifications           *[]Notification      `json:"notifications,omitempty"`
	SecurityUpdates         bool                 `json:"securityUpdates"`
	WorkspaceId             string               `json:"workspaceId"`
}

// WorkspaceUpdateName defines model for WorkspaceUpdateName.
type WorkspaceUpdateName struct {
	Name        string `json:"name"`
	WorkspaceId string `json:"workspaceId"`
}

// CreateConnectionJSONBody defines parameters for CreateConnection.
type CreateConnectionJSONBody ConnectionCreate

// DeleteConnectionJSONBody defines parameters for DeleteConnection.
type DeleteConnectionJSONBody ConnectionIdRequestBody

// GetConnectionJSONBody defines parameters for GetConnection.
type GetConnectionJSONBody ConnectionIdRequestBody

// ListConnectionsForWorkspaceJSONBody defines parameters for ListConnectionsForWorkspace.
type ListConnectionsForWorkspaceJSONBody WorkspaceIdRequestBody

// ListAllConnectionsForWorkspaceJSONBody defines parameters for ListAllConnectionsForWorkspace.
type ListAllConnectionsForWorkspaceJSONBody WorkspaceIdRequestBody

// ResetConnectionJSONBody defines parameters for ResetConnection.
type ResetConnectionJSONBody ConnectionIdRequestBody

// SearchConnectionsJSONBody defines parameters for SearchConnections.
type SearchConnectionsJSONBody ConnectionSearch

// SyncConnectionJSONBody defines parameters for SyncConnection.
type SyncConnectionJSONBody ConnectionIdRequestBody

// UpdateConnectionJSONBody defines parameters for UpdateConnection.
type UpdateConnectionJSONBody ConnectionUpdate

// ListMigrationsJSONBody defines parameters for ListMigrations.
type ListMigrationsJSONBody DbMigrationRequestBody

// ExecuteMigrationsJSONBody defines parameters for ExecuteMigrations.
type ExecuteMigrationsJSONBody DbMigrationRequestBody

// ExportWorkspaceJSONBody defines parameters for ExportWorkspace.
type ExportWorkspaceJSONBody WorkspaceIdRequestBody

// ImportIntoWorkspaceJSONBody defines parameters for ImportIntoWorkspace.
type ImportIntoWorkspaceJSONBody ImportRequestBody

// GetDestinationDefinitionSpecificationJSONBody defines parameters for GetDestinationDefinitionSpecification.
type GetDestinationDefinitionSpecificationJSONBody DestinationDefinitionIdRequestBody

// CreateDestinationDefinitionJSONBody defines parameters for CreateDestinationDefinition.
type CreateDestinationDefinitionJSONBody DestinationDefinitionCreate

// DeleteDestinationDefinitionJSONBody defines parameters for DeleteDestinationDefinition.
type DeleteDestinationDefinitionJSONBody DestinationDefinitionIdRequestBody

// GetDestinationDefinitionJSONBody defines parameters for GetDestinationDefinition.
type GetDestinationDefinitionJSONBody DestinationDefinitionIdRequestBody

// UpdateDestinationDefinitionJSONBody defines parameters for UpdateDestinationDefinition.
type UpdateDestinationDefinitionJSONBody DestinationDefinitionUpdate

// CompleteDestinationOAuthJSONBody defines parameters for CompleteDestinationOAuth.
type CompleteDestinationOAuthJSONBody CompleteDestinationOAuthRequest

// GetDestinationOAuthConsentJSONBody defines parameters for GetDestinationOAuthConsent.
type GetDestinationOAuthConsentJSONBody DestinationOauthConsentRequest

// SetInstancewideDestinationOauthParamsJSONBody defines parameters for SetInstancewideDestinationOauthParams.
type SetInstancewideDestinationOauthParamsJSONBody SetInstancewideDestinationOauthParamsRequestBody

// CheckConnectionToDestinationJSONBody defines parameters for CheckConnectionToDestination.
type CheckConnectionToDestinationJSONBody DestinationIdRequestBody

// CheckConnectionToDestinationForUpdateJSONBody defines parameters for CheckConnectionToDestinationForUpdate.
type CheckConnectionToDestinationForUpdateJSONBody DestinationUpdate

// CreateDestinationJSONBody defines parameters for CreateDestination.
type CreateDestinationJSONBody DestinationCreate

// DeleteDestinationJSONBody defines parameters for DeleteDestination.
type DeleteDestinationJSONBody DestinationIdRequestBody

// GetDestinationJSONBody defines parameters for GetDestination.
type GetDestinationJSONBody DestinationIdRequestBody

// ListDestinationsForWorkspaceJSONBody defines parameters for ListDestinationsForWorkspace.
type ListDestinationsForWorkspaceJSONBody WorkspaceIdRequestBody

// SearchDestinationsJSONBody defines parameters for SearchDestinations.
type SearchDestinationsJSONBody DestinationSearch

// UpdateDestinationJSONBody defines parameters for UpdateDestination.
type UpdateDestinationJSONBody DestinationUpdate

// CancelJobJSONBody defines parameters for CancelJob.
type CancelJobJSONBody JobIdRequestBody

// GetJobInfoJSONBody defines parameters for GetJobInfo.
type GetJobInfoJSONBody JobIdRequestBody

// GetJobDebugInfoJSONBody defines parameters for GetJobDebugInfo.
type GetJobDebugInfoJSONBody JobIdRequestBody

// ListJobsForJSONBody defines parameters for ListJobsFor.
type ListJobsForJSONBody JobListRequestBody

// GetLogsJSONBody defines parameters for GetLogs.
type GetLogsJSONBody LogsRequestBody

// TryNotificationConfigJSONBody defines parameters for TryNotificationConfig.
type TryNotificationConfigJSONBody Notification

// CheckOperationJSONBody defines parameters for CheckOperation.
type CheckOperationJSONBody OperatorConfiguration

// CreateOperationJSONBody defines parameters for CreateOperation.
type CreateOperationJSONBody OperationCreate

// DeleteOperationJSONBody defines parameters for DeleteOperation.
type DeleteOperationJSONBody OperationIdRequestBody

// GetOperationJSONBody defines parameters for GetOperation.
type GetOperationJSONBody OperationIdRequestBody

// ListOperationsForConnectionJSONBody defines parameters for ListOperationsForConnection.
type ListOperationsForConnectionJSONBody ConnectionIdRequestBody

// UpdateOperationJSONBody defines parameters for UpdateOperation.
type UpdateOperationJSONBody OperationUpdate

// ExecuteDestinationCheckConnectionJSONBody defines parameters for ExecuteDestinationCheckConnection.
type ExecuteDestinationCheckConnectionJSONBody DestinationCoreConfig

// ExecuteSourceCheckConnectionJSONBody defines parameters for ExecuteSourceCheckConnection.
type ExecuteSourceCheckConnectionJSONBody SourceCoreConfig

// ExecuteSourceDiscoverSchemaJSONBody defines parameters for ExecuteSourceDiscoverSchema.
type ExecuteSourceDiscoverSchemaJSONBody SourceCoreConfig

// GetSourceDefinitionSpecificationJSONBody defines parameters for GetSourceDefinitionSpecification.
type GetSourceDefinitionSpecificationJSONBody SourceDefinitionIdRequestBody

// CreateSourceDefinitionJSONBody defines parameters for CreateSourceDefinition.
type CreateSourceDefinitionJSONBody SourceDefinitionCreate

// DeleteSourceDefinitionJSONBody defines parameters for DeleteSourceDefinition.
type DeleteSourceDefinitionJSONBody SourceDefinitionIdRequestBody

// GetSourceDefinitionJSONBody defines parameters for GetSourceDefinition.
type GetSourceDefinitionJSONBody SourceDefinitionIdRequestBody

// UpdateSourceDefinitionJSONBody defines parameters for UpdateSourceDefinition.
type UpdateSourceDefinitionJSONBody SourceDefinitionUpdate

// CompleteSourceOAuthJSONBody defines parameters for CompleteSourceOAuth.
type CompleteSourceOAuthJSONBody CompleteSourceOauthRequest

// GetSourceOAuthConsentJSONBody defines parameters for GetSourceOAuthConsent.
type GetSourceOAuthConsentJSONBody SourceOauthConsentRequest

// SetInstancewideSourceOauthParamsJSONBody defines parameters for SetInstancewideSourceOauthParams.
type SetInstancewideSourceOauthParamsJSONBody SetInstancewideSourceOauthParamsRequestBody

// CheckConnectionToSourceJSONBody defines parameters for CheckConnectionToSource.
type CheckConnectionToSourceJSONBody SourceIdRequestBody

// CheckConnectionToSourceForUpdateJSONBody defines parameters for CheckConnectionToSourceForUpdate.
type CheckConnectionToSourceForUpdateJSONBody SourceUpdate

// CreateSourceJSONBody defines parameters for CreateSource.
type CreateSourceJSONBody SourceCreate

// DeleteSourceJSONBody defines parameters for DeleteSource.
type DeleteSourceJSONBody SourceIdRequestBody

// DiscoverSchemaForSourceJSONBody defines parameters for DiscoverSchemaForSource.
type DiscoverSchemaForSourceJSONBody SourceIdRequestBody

// GetSourceJSONBody defines parameters for GetSource.
type GetSourceJSONBody SourceIdRequestBody

// ListSourcesForWorkspaceJSONBody defines parameters for ListSourcesForWorkspace.
type ListSourcesForWorkspaceJSONBody WorkspaceIdRequestBody

// SearchSourcesJSONBody defines parameters for SearchSources.
type SearchSourcesJSONBody SourceSearch

// UpdateSourceJSONBody defines parameters for UpdateSource.
type UpdateSourceJSONBody SourceUpdate

// GetStateJSONBody defines parameters for GetState.
type GetStateJSONBody ConnectionIdRequestBody

// WebBackendCreateConnectionJSONBody defines parameters for WebBackendCreateConnection.
type WebBackendCreateConnectionJSONBody WebBackendConnectionCreate

// WebBackendGetConnectionJSONBody defines parameters for WebBackendGetConnection.
type WebBackendGetConnectionJSONBody WebBackendConnectionRequestBody

// WebBackendListConnectionsForWorkspaceJSONBody defines parameters for WebBackendListConnectionsForWorkspace.
type WebBackendListConnectionsForWorkspaceJSONBody WorkspaceIdRequestBody

// WebBackendListAllConnectionsForWorkspaceJSONBody defines parameters for WebBackendListAllConnectionsForWorkspace.
type WebBackendListAllConnectionsForWorkspaceJSONBody WorkspaceIdRequestBody

// WebBackendSearchConnectionsJSONBody defines parameters for WebBackendSearchConnections.
type WebBackendSearchConnectionsJSONBody WebBackendConnectionSearch

// WebBackendUpdateConnectionJSONBody defines parameters for WebBackendUpdateConnection.
type WebBackendUpdateConnectionJSONBody WebBackendConnectionUpdate

// CreateWorkspaceJSONBody defines parameters for CreateWorkspace.
type CreateWorkspaceJSONBody WorkspaceCreate

// DeleteWorkspaceJSONBody defines parameters for DeleteWorkspace.
type DeleteWorkspaceJSONBody WorkspaceIdRequestBody

// GetWorkspaceJSONBody defines parameters for GetWorkspace.
type GetWorkspaceJSONBody WorkspaceIdRequestBody

// GetWorkspaceBySlugJSONBody defines parameters for GetWorkspaceBySlug.
type GetWorkspaceBySlugJSONBody SlugRequestBody

// UpdateWorkspaceFeedbackJSONBody defines parameters for UpdateWorkspaceFeedback.
type UpdateWorkspaceFeedbackJSONBody WorkspaceGiveFeedback

// UpdateWorkspaceJSONBody defines parameters for UpdateWorkspace.
type UpdateWorkspaceJSONBody WorkspaceUpdate

// UpdateWorkspaceNameJSONBody defines parameters for UpdateWorkspaceName.
type UpdateWorkspaceNameJSONBody WorkspaceUpdateName

// CreateConnectionJSONRequestBody defines body for CreateConnection for application/json ContentType.
type CreateConnectionJSONRequestBody CreateConnectionJSONBody

// DeleteConnectionJSONRequestBody defines body for DeleteConnection for application/json ContentType.
type DeleteConnectionJSONRequestBody DeleteConnectionJSONBody

// GetConnectionJSONRequestBody defines body for GetConnection for application/json ContentType.
type GetConnectionJSONRequestBody GetConnectionJSONBody

// ListConnectionsForWorkspaceJSONRequestBody defines body for ListConnectionsForWorkspace for application/json ContentType.
type ListConnectionsForWorkspaceJSONRequestBody ListConnectionsForWorkspaceJSONBody

// ListAllConnectionsForWorkspaceJSONRequestBody defines body for ListAllConnectionsForWorkspace for application/json ContentType.
type ListAllConnectionsForWorkspaceJSONRequestBody ListAllConnectionsForWorkspaceJSONBody

// ResetConnectionJSONRequestBody defines body for ResetConnection for application/json ContentType.
type ResetConnectionJSONRequestBody ResetConnectionJSONBody

// SearchConnectionsJSONRequestBody defines body for SearchConnections for application/json ContentType.
type SearchConnectionsJSONRequestBody SearchConnectionsJSONBody

// SyncConnectionJSONRequestBody defines body for SyncConnection for application/json ContentType.
type SyncConnectionJSONRequestBody SyncConnectionJSONBody

// UpdateConnectionJSONRequestBody defines body for UpdateConnection for application/json ContentType.
type UpdateConnectionJSONRequestBody UpdateConnectionJSONBody

// ListMigrationsJSONRequestBody defines body for ListMigrations for application/json ContentType.
type ListMigrationsJSONRequestBody ListMigrationsJSONBody

// ExecuteMigrationsJSONRequestBody defines body for ExecuteMigrations for application/json ContentType.
type ExecuteMigrationsJSONRequestBody ExecuteMigrationsJSONBody

// ExportWorkspaceJSONRequestBody defines body for ExportWorkspace for application/json ContentType.
type ExportWorkspaceJSONRequestBody ExportWorkspaceJSONBody

// ImportIntoWorkspaceJSONRequestBody defines body for ImportIntoWorkspace for application/json ContentType.
type ImportIntoWorkspaceJSONRequestBody ImportIntoWorkspaceJSONBody

// GetDestinationDefinitionSpecificationJSONRequestBody defines body for GetDestinationDefinitionSpecification for application/json ContentType.
type GetDestinationDefinitionSpecificationJSONRequestBody GetDestinationDefinitionSpecificationJSONBody

// CreateDestinationDefinitionJSONRequestBody defines body for CreateDestinationDefinition for application/json ContentType.
type CreateDestinationDefinitionJSONRequestBody CreateDestinationDefinitionJSONBody

// DeleteDestinationDefinitionJSONRequestBody defines body for DeleteDestinationDefinition for application/json ContentType.
type DeleteDestinationDefinitionJSONRequestBody DeleteDestinationDefinitionJSONBody

// GetDestinationDefinitionJSONRequestBody defines body for GetDestinationDefinition for application/json ContentType.
type GetDestinationDefinitionJSONRequestBody GetDestinationDefinitionJSONBody

// UpdateDestinationDefinitionJSONRequestBody defines body for UpdateDestinationDefinition for application/json ContentType.
type UpdateDestinationDefinitionJSONRequestBody UpdateDestinationDefinitionJSONBody

// CompleteDestinationOAuthJSONRequestBody defines body for CompleteDestinationOAuth for application/json ContentType.
type CompleteDestinationOAuthJSONRequestBody CompleteDestinationOAuthJSONBody

// GetDestinationOAuthConsentJSONRequestBody defines body for GetDestinationOAuthConsent for application/json ContentType.
type GetDestinationOAuthConsentJSONRequestBody GetDestinationOAuthConsentJSONBody

// SetInstancewideDestinationOauthParamsJSONRequestBody defines body for SetInstancewideDestinationOauthParams for application/json ContentType.
type SetInstancewideDestinationOauthParamsJSONRequestBody SetInstancewideDestinationOauthParamsJSONBody

// CheckConnectionToDestinationJSONRequestBody defines body for CheckConnectionToDestination for application/json ContentType.
type CheckConnectionToDestinationJSONRequestBody CheckConnectionToDestinationJSONBody

// CheckConnectionToDestinationForUpdateJSONRequestBody defines body for CheckConnectionToDestinationForUpdate for application/json ContentType.
type CheckConnectionToDestinationForUpdateJSONRequestBody CheckConnectionToDestinationForUpdateJSONBody

// CreateDestinationJSONRequestBody defines body for CreateDestination for application/json ContentType.
type CreateDestinationJSONRequestBody CreateDestinationJSONBody

// DeleteDestinationJSONRequestBody defines body for DeleteDestination for application/json ContentType.
type DeleteDestinationJSONRequestBody DeleteDestinationJSONBody

// GetDestinationJSONRequestBody defines body for GetDestination for application/json ContentType.
type GetDestinationJSONRequestBody GetDestinationJSONBody

// ListDestinationsForWorkspaceJSONRequestBody defines body for ListDestinationsForWorkspace for application/json ContentType.
type ListDestinationsForWorkspaceJSONRequestBody ListDestinationsForWorkspaceJSONBody

// SearchDestinationsJSONRequestBody defines body for SearchDestinations for application/json ContentType.
type SearchDestinationsJSONRequestBody SearchDestinationsJSONBody

// UpdateDestinationJSONRequestBody defines body for UpdateDestination for application/json ContentType.
type UpdateDestinationJSONRequestBody UpdateDestinationJSONBody

// CancelJobJSONRequestBody defines body for CancelJob for application/json ContentType.
type CancelJobJSONRequestBody CancelJobJSONBody

// GetJobInfoJSONRequestBody defines body for GetJobInfo for application/json ContentType.
type GetJobInfoJSONRequestBody GetJobInfoJSONBody

// GetJobDebugInfoJSONRequestBody defines body for GetJobDebugInfo for application/json ContentType.
type GetJobDebugInfoJSONRequestBody GetJobDebugInfoJSONBody

// ListJobsForJSONRequestBody defines body for ListJobsFor for application/json ContentType.
type ListJobsForJSONRequestBody ListJobsForJSONBody

// GetLogsJSONRequestBody defines body for GetLogs for application/json ContentType.
type GetLogsJSONRequestBody GetLogsJSONBody

// TryNotificationConfigJSONRequestBody defines body for TryNotificationConfig for application/json ContentType.
type TryNotificationConfigJSONRequestBody TryNotificationConfigJSONBody

// CheckOperationJSONRequestBody defines body for CheckOperation for application/json ContentType.
type CheckOperationJSONRequestBody CheckOperationJSONBody

// CreateOperationJSONRequestBody defines body for CreateOperation for application/json ContentType.
type CreateOperationJSONRequestBody CreateOperationJSONBody

// DeleteOperationJSONRequestBody defines body for DeleteOperation for application/json ContentType.
type DeleteOperationJSONRequestBody DeleteOperationJSONBody

// GetOperationJSONRequestBody defines body for GetOperation for application/json ContentType.
type GetOperationJSONRequestBody GetOperationJSONBody

// ListOperationsForConnectionJSONRequestBody defines body for ListOperationsForConnection for application/json ContentType.
type ListOperationsForConnectionJSONRequestBody ListOperationsForConnectionJSONBody

// UpdateOperationJSONRequestBody defines body for UpdateOperation for application/json ContentType.
type UpdateOperationJSONRequestBody UpdateOperationJSONBody

// ExecuteDestinationCheckConnectionJSONRequestBody defines body for ExecuteDestinationCheckConnection for application/json ContentType.
type ExecuteDestinationCheckConnectionJSONRequestBody ExecuteDestinationCheckConnectionJSONBody

// ExecuteSourceCheckConnectionJSONRequestBody defines body for ExecuteSourceCheckConnection for application/json ContentType.
type ExecuteSourceCheckConnectionJSONRequestBody ExecuteSourceCheckConnectionJSONBody

// ExecuteSourceDiscoverSchemaJSONRequestBody defines body for ExecuteSourceDiscoverSchema for application/json ContentType.
type ExecuteSourceDiscoverSchemaJSONRequestBody ExecuteSourceDiscoverSchemaJSONBody

// GetSourceDefinitionSpecificationJSONRequestBody defines body for GetSourceDefinitionSpecification for application/json ContentType.
type GetSourceDefinitionSpecificationJSONRequestBody GetSourceDefinitionSpecificationJSONBody

// CreateSourceDefinitionJSONRequestBody defines body for CreateSourceDefinition for application/json ContentType.
type CreateSourceDefinitionJSONRequestBody CreateSourceDefinitionJSONBody

// DeleteSourceDefinitionJSONRequestBody defines body for DeleteSourceDefinition for application/json ContentType.
type DeleteSourceDefinitionJSONRequestBody DeleteSourceDefinitionJSONBody

// GetSourceDefinitionJSONRequestBody defines body for GetSourceDefinition for application/json ContentType.
type GetSourceDefinitionJSONRequestBody GetSourceDefinitionJSONBody

// UpdateSourceDefinitionJSONRequestBody defines body for UpdateSourceDefinition for application/json ContentType.
type UpdateSourceDefinitionJSONRequestBody UpdateSourceDefinitionJSONBody

// CompleteSourceOAuthJSONRequestBody defines body for CompleteSourceOAuth for application/json ContentType.
type CompleteSourceOAuthJSONRequestBody CompleteSourceOAuthJSONBody

// GetSourceOAuthConsentJSONRequestBody defines body for GetSourceOAuthConsent for application/json ContentType.
type GetSourceOAuthConsentJSONRequestBody GetSourceOAuthConsentJSONBody

// SetInstancewideSourceOauthParamsJSONRequestBody defines body for SetInstancewideSourceOauthParams for application/json ContentType.
type SetInstancewideSourceOauthParamsJSONRequestBody SetInstancewideSourceOauthParamsJSONBody

// CheckConnectionToSourceJSONRequestBody defines body for CheckConnectionToSource for application/json ContentType.
type CheckConnectionToSourceJSONRequestBody CheckConnectionToSourceJSONBody

// CheckConnectionToSourceForUpdateJSONRequestBody defines body for CheckConnectionToSourceForUpdate for application/json ContentType.
type CheckConnectionToSourceForUpdateJSONRequestBody CheckConnectionToSourceForUpdateJSONBody

// CreateSourceJSONRequestBody defines body for CreateSource for application/json ContentType.
type CreateSourceJSONRequestBody CreateSourceJSONBody

// DeleteSourceJSONRequestBody defines body for DeleteSource for application/json ContentType.
type DeleteSourceJSONRequestBody DeleteSourceJSONBody

// DiscoverSchemaForSourceJSONRequestBody defines body for DiscoverSchemaForSource for application/json ContentType.
type DiscoverSchemaForSourceJSONRequestBody DiscoverSchemaForSourceJSONBody

// GetSourceJSONRequestBody defines body for GetSource for application/json ContentType.
type GetSourceJSONRequestBody GetSourceJSONBody

// ListSourcesForWorkspaceJSONRequestBody defines body for ListSourcesForWorkspace for application/json ContentType.
type ListSourcesForWorkspaceJSONRequestBody ListSourcesForWorkspaceJSONBody

// SearchSourcesJSONRequestBody defines body for SearchSources for application/json ContentType.
type SearchSourcesJSONRequestBody SearchSourcesJSONBody

// UpdateSourceJSONRequestBody defines body for UpdateSource for application/json ContentType.
type UpdateSourceJSONRequestBody UpdateSourceJSONBody

// GetStateJSONRequestBody defines body for GetState for application/json ContentType.
type GetStateJSONRequestBody GetStateJSONBody

// WebBackendCreateConnectionJSONRequestBody defines body for WebBackendCreateConnection for application/json ContentType.
type WebBackendCreateConnectionJSONRequestBody WebBackendCreateConnectionJSONBody

// WebBackendGetConnectionJSONRequestBody defines body for WebBackendGetConnection for application/json ContentType.
type WebBackendGetConnectionJSONRequestBody WebBackendGetConnectionJSONBody

// WebBackendListConnectionsForWorkspaceJSONRequestBody defines body for WebBackendListConnectionsForWorkspace for application/json ContentType.
type WebBackendListConnectionsForWorkspaceJSONRequestBody WebBackendListConnectionsForWorkspaceJSONBody

// WebBackendListAllConnectionsForWorkspaceJSONRequestBody defines body for WebBackendListAllConnectionsForWorkspace for application/json ContentType.
type WebBackendListAllConnectionsForWorkspaceJSONRequestBody WebBackendListAllConnectionsForWorkspaceJSONBody

// WebBackendSearchConnectionsJSONRequestBody defines body for WebBackendSearchConnections for application/json ContentType.
type WebBackendSearchConnectionsJSONRequestBody WebBackendSearchConnectionsJSONBody

// WebBackendUpdateConnectionJSONRequestBody defines body for WebBackendUpdateConnection for application/json ContentType.
type WebBackendUpdateConnectionJSONRequestBody WebBackendUpdateConnectionJSONBody

// CreateWorkspaceJSONRequestBody defines body for CreateWorkspace for application/json ContentType.
type CreateWorkspaceJSONRequestBody CreateWorkspaceJSONBody

// DeleteWorkspaceJSONRequestBody defines body for DeleteWorkspace for application/json ContentType.
type DeleteWorkspaceJSONRequestBody DeleteWorkspaceJSONBody

// GetWorkspaceJSONRequestBody defines body for GetWorkspace for application/json ContentType.
type GetWorkspaceJSONRequestBody GetWorkspaceJSONBody

// GetWorkspaceBySlugJSONRequestBody defines body for GetWorkspaceBySlug for application/json ContentType.
type GetWorkspaceBySlugJSONRequestBody GetWorkspaceBySlugJSONBody

// UpdateWorkspaceFeedbackJSONRequestBody defines body for UpdateWorkspaceFeedback for application/json ContentType.
type UpdateWorkspaceFeedbackJSONRequestBody UpdateWorkspaceFeedbackJSONBody

// UpdateWorkspaceJSONRequestBody defines body for UpdateWorkspace for application/json ContentType.
type UpdateWorkspaceJSONRequestBody UpdateWorkspaceJSONBody

// UpdateWorkspaceNameJSONRequestBody defines body for UpdateWorkspaceName for application/json ContentType.
type UpdateWorkspaceNameJSONRequestBody UpdateWorkspaceNameJSONBody

// Getter for additional properties for CompleteDestinationOAuthRequest_QueryParams. Returns the specified
// element and whether it was found
func (a CompleteDestinationOAuthRequest_QueryParams) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CompleteDestinationOAuthRequest_QueryParams
func (a *CompleteDestinationOAuthRequest_QueryParams) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CompleteDestinationOAuthRequest_QueryParams to handle AdditionalProperties
func (a *CompleteDestinationOAuthRequest_QueryParams) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CompleteDestinationOAuthRequest_QueryParams to handle AdditionalProperties
func (a CompleteDestinationOAuthRequest_QueryParams) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CompleteOAuthResponse. Returns the specified
// element and whether it was found
func (a CompleteOAuthResponse) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CompleteOAuthResponse
func (a *CompleteOAuthResponse) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CompleteOAuthResponse to handle AdditionalProperties
func (a *CompleteOAuthResponse) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CompleteOAuthResponse to handle AdditionalProperties
func (a CompleteOAuthResponse) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for CompleteSourceOauthRequest_QueryParams. Returns the specified
// element and whether it was found
func (a CompleteSourceOauthRequest_QueryParams) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for CompleteSourceOauthRequest_QueryParams
func (a *CompleteSourceOauthRequest_QueryParams) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for CompleteSourceOauthRequest_QueryParams to handle AdditionalProperties
func (a *CompleteSourceOauthRequest_QueryParams) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for CompleteSourceOauthRequest_QueryParams to handle AdditionalProperties
func (a CompleteSourceOauthRequest_QueryParams) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SetInstancewideDestinationOauthParamsRequestBody_Params. Returns the specified
// element and whether it was found
func (a SetInstancewideDestinationOauthParamsRequestBody_Params) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SetInstancewideDestinationOauthParamsRequestBody_Params
func (a *SetInstancewideDestinationOauthParamsRequestBody_Params) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SetInstancewideDestinationOauthParamsRequestBody_Params to handle AdditionalProperties
func (a *SetInstancewideDestinationOauthParamsRequestBody_Params) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SetInstancewideDestinationOauthParamsRequestBody_Params to handle AdditionalProperties
func (a SetInstancewideDestinationOauthParamsRequestBody_Params) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for SetInstancewideSourceOauthParamsRequestBody_Params. Returns the specified
// element and whether it was found
func (a SetInstancewideSourceOauthParamsRequestBody_Params) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for SetInstancewideSourceOauthParamsRequestBody_Params
func (a *SetInstancewideSourceOauthParamsRequestBody_Params) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for SetInstancewideSourceOauthParamsRequestBody_Params to handle AdditionalProperties
func (a *SetInstancewideSourceOauthParamsRequestBody_Params) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for SetInstancewideSourceOauthParamsRequestBody_Params to handle AdditionalProperties
func (a SetInstancewideSourceOauthParamsRequestBody_Params) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateConnection request with any body
	CreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateConnection(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConnection request with any body
	DeleteConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteConnection(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnection request with any body
	GetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetConnection(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectionsForWorkspace request with any body
	ListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListConnectionsForWorkspace(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllConnectionsForWorkspace request with any body
	ListAllConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListAllConnectionsForWorkspace(ctx context.Context, body ListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ResetConnection request with any body
	ResetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ResetConnection(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchConnections request with any body
	SearchConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchConnections(ctx context.Context, body SearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SyncConnection request with any body
	SyncConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SyncConnection(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnection request with any body
	UpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConnection(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMigrations request with any body
	ListMigrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListMigrations(ctx context.Context, body ListMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteMigrations request with any body
	ExecuteMigrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteMigrations(ctx context.Context, body ExecuteMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportArchive request
	ExportArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExportWorkspace request with any body
	ExportWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExportWorkspace(ctx context.Context, body ExportWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportArchive request with any body
	ImportArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ImportIntoWorkspace request with any body
	ImportIntoWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ImportIntoWorkspace(ctx context.Context, body ImportIntoWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadArchiveResource request with any body
	UploadArchiveResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDestinationDefinitionSpecification request with any body
	GetDestinationDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDestinationDefinitionSpecification(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDestinationDefinition request with any body
	CreateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDestinationDefinition(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDestinationDefinition request with any body
	DeleteDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDestinationDefinition(ctx context.Context, body DeleteDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDestinationDefinition request with any body
	GetDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDestinationDefinition(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDestinationDefinitions request
	ListDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLatestDestinationDefinitions request
	ListLatestDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDestinationDefinition request with any body
	UpdateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDestinationDefinition(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteDestinationOAuth request with any body
	CompleteDestinationOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteDestinationOAuth(ctx context.Context, body CompleteDestinationOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDestinationOAuthConsent request with any body
	GetDestinationOAuthConsentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDestinationOAuthConsent(ctx context.Context, body GetDestinationOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetInstancewideDestinationOauthParams request with any body
	SetInstancewideDestinationOauthParamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetInstancewideDestinationOauthParams(ctx context.Context, body SetInstancewideDestinationOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToDestination request with any body
	CheckConnectionToDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToDestination(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToDestinationForUpdate request with any body
	CheckConnectionToDestinationForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToDestinationForUpdate(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDestination request with any body
	CreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDestination(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDestination request with any body
	DeleteDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteDestination(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDestination request with any body
	GetDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetDestination(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDestinationsForWorkspace request with any body
	ListDestinationsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListDestinationsForWorkspace(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchDestinations request with any body
	SearchDestinationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchDestinations(ctx context.Context, body SearchDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDestination request with any body
	UpdateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDestination(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealthCheck request
	GetHealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CancelJob request with any body
	CancelJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CancelJob(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobInfo request with any body
	GetJobInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetJobInfo(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetJobDebugInfo request with any body
	GetJobDebugInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetJobDebugInfo(ctx context.Context, body GetJobDebugInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListJobsFor request with any body
	ListJobsForWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListJobsFor(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetLogs request with any body
	GetLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetLogs(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TryNotificationConfig request with any body
	TryNotificationConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TryNotificationConfig(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOpenApiSpec request
	GetOpenApiSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckOperation request with any body
	CheckOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckOperation(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOperation request with any body
	CreateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOperation(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOperation request with any body
	DeleteOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteOperation(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOperation request with any body
	GetOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetOperation(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOperationsForConnection request with any body
	ListOperationsForConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListOperationsForConnection(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOperation request with any body
	UpdateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateOperation(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteDestinationCheckConnection request with any body
	ExecuteDestinationCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteDestinationCheckConnection(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteSourceCheckConnection request with any body
	ExecuteSourceCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteSourceCheckConnection(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ExecuteSourceDiscoverSchema request with any body
	ExecuteSourceDiscoverSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ExecuteSourceDiscoverSchema(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourceDefinitionSpecification request with any body
	GetSourceDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSourceDefinitionSpecification(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSourceDefinition request with any body
	CreateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSourceDefinition(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSourceDefinition request with any body
	DeleteSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSourceDefinition(ctx context.Context, body DeleteSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourceDefinition request with any body
	GetSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSourceDefinition(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourceDefinitions request
	ListSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListLatestSourceDefinitions request
	ListLatestSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSourceDefinition request with any body
	UpdateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSourceDefinition(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CompleteSourceOAuth request with any body
	CompleteSourceOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CompleteSourceOAuth(ctx context.Context, body CompleteSourceOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSourceOAuthConsent request with any body
	GetSourceOAuthConsentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSourceOAuthConsent(ctx context.Context, body GetSourceOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SetInstancewideSourceOauthParams request with any body
	SetInstancewideSourceOauthParamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SetInstancewideSourceOauthParams(ctx context.Context, body SetInstancewideSourceOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToSource request with any body
	CheckConnectionToSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToSource(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckConnectionToSourceForUpdate request with any body
	CheckConnectionToSourceForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckConnectionToSourceForUpdate(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSource request with any body
	CreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSource(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSource request with any body
	DeleteSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSource(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DiscoverSchemaForSource request with any body
	DiscoverSchemaForSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DiscoverSchemaForSource(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSource request with any body
	GetSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetSource(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSourcesForWorkspace request with any body
	ListSourcesForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ListSourcesForWorkspace(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchSources request with any body
	SearchSourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	SearchSources(ctx context.Context, body SearchSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSource request with any body
	UpdateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSource(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetState request with any body
	GetStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetState(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendCreateConnection request with any body
	WebBackendCreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendCreateConnection(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendGetConnection request with any body
	WebBackendGetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendGetConnection(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendListConnectionsForWorkspace request with any body
	WebBackendListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendListConnectionsForWorkspace(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendListAllConnectionsForWorkspace request with any body
	WebBackendListAllConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendListAllConnectionsForWorkspace(ctx context.Context, body WebBackendListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendSearchConnections request with any body
	WebBackendSearchConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendSearchConnections(ctx context.Context, body WebBackendSearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// WebBackendUpdateConnection request with any body
	WebBackendUpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	WebBackendUpdateConnection(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateWorkspace(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWorkspace request with any body
	DeleteWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteWorkspace(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspace request with any body
	GetWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkspace(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWorkspaceBySlug request with any body
	GetWorkspaceBySlugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	GetWorkspaceBySlug(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListWorkspaces request
	ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceFeedback request with any body
	UpdateWorkspaceFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceFeedback(ctx context.Context, body UpdateWorkspaceFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspace(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateWorkspaceName request with any body
	UpdateWorkspaceNameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateWorkspaceName(ctx context.Context, body UpdateWorkspaceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateConnection(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnection(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnection(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectionsForWorkspace(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectionsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllConnectionsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllConnectionsForWorkspace(ctx context.Context, body ListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllConnectionsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ResetConnection(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewResetConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchConnectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchConnections(ctx context.Context, body SearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchConnectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SyncConnection(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSyncConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnection(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMigrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMigrationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMigrations(ctx context.Context, body ListMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMigrationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteMigrationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteMigrationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteMigrations(ctx context.Context, body ExecuteMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteMigrationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportArchive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportArchiveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExportWorkspace(ctx context.Context, body ExportWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExportWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportArchiveWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportArchiveRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportIntoWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportIntoWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ImportIntoWorkspace(ctx context.Context, body ImportIntoWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewImportIntoWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadArchiveResourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadArchiveResourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionSpecificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinitionSpecification(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionSpecificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestinationDefinition(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDestinationDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDestinationDefinition(ctx context.Context, body DeleteDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDestinationDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationDefinition(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDestinationDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLatestDestinationDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLatestDestinationDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestinationDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestinationDefinition(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteDestinationOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteDestinationOAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteDestinationOAuth(ctx context.Context, body CompleteDestinationOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteDestinationOAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationOAuthConsentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationOAuthConsentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationOAuthConsent(ctx context.Context, body GetDestinationOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationOAuthConsentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetInstancewideDestinationOauthParamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetInstancewideDestinationOauthParamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetInstancewideDestinationOauthParams(ctx context.Context, body SetInstancewideDestinationOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetInstancewideDestinationOauthParamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestination(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestinationForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationForUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToDestinationForUpdate(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToDestinationForUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDestination(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDestination(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDestination(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDestinationsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDestinationsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDestinationsForWorkspace(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDestinationsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDestinationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDestinationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchDestinations(ctx context.Context, body SearchDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchDestinationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestinationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDestination(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDestinationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealthCheck(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthCheckRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelJobWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelJobRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CancelJob(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCancelJobRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobInfo(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobDebugInfoWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobDebugInfoRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetJobDebugInfo(ctx context.Context, body GetJobDebugInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetJobDebugInfoRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobsForWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobsForRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListJobsFor(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListJobsForRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetLogs(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetLogsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TryNotificationConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTryNotificationConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TryNotificationConfig(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTryNotificationConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOpenApiSpec(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOpenApiSpecRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckOperation(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOperation(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOperation(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOperation(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOperationsForConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOperationsForConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOperationsForConnection(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOperationsForConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOperation(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOperationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteDestinationCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteDestinationCheckConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteDestinationCheckConnection(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteDestinationCheckConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceCheckConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceCheckConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceCheckConnection(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceCheckConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceDiscoverSchemaWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceDiscoverSchemaRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ExecuteSourceDiscoverSchema(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewExecuteSourceDiscoverSchemaRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinitionSpecificationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionSpecificationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinitionSpecification(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionSpecificationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourceDefinition(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSourceDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSourceDefinition(ctx context.Context, body DeleteSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSourceDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceDefinition(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourceDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListLatestSourceDefinitions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListLatestSourceDefinitionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSourceDefinitionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceDefinitionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSourceDefinition(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceDefinitionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteSourceOAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteSourceOAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CompleteSourceOAuth(ctx context.Context, body CompleteSourceOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCompleteSourceOAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceOAuthConsentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceOAuthConsentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceOAuthConsent(ctx context.Context, body GetSourceOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceOAuthConsentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetInstancewideSourceOauthParamsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetInstancewideSourceOauthParamsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SetInstancewideSourceOauthParams(ctx context.Context, body SetInstancewideSourceOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSetInstancewideSourceOauthParamsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSource(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSourceForUpdateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceForUpdateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckConnectionToSourceForUpdate(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckConnectionToSourceForUpdateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSource(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSource(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiscoverSchemaForSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiscoverSchemaForSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DiscoverSchemaForSource(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDiscoverSchemaForSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSource(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourcesForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourcesForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSourcesForWorkspace(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSourcesForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSourcesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSourcesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchSources(ctx context.Context, body SearchSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchSourcesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSourceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSource(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSourceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetState(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendCreateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendCreateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendCreateConnection(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendCreateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendGetConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendGetConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendGetConnection(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendGetConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendListConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendListConnectionsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendListConnectionsForWorkspace(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendListConnectionsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendListAllConnectionsForWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendListAllConnectionsForWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendListAllConnectionsForWorkspace(ctx context.Context, body WebBackendListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendListAllConnectionsForWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendSearchConnectionsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendSearchConnectionsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendSearchConnections(ctx context.Context, body WebBackendSearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendSearchConnectionsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendUpdateConnectionWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendUpdateConnectionRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) WebBackendUpdateConnection(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewWebBackendUpdateConnectionRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateWorkspace(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWorkspace(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspace(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceBySlugWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceBySlugRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWorkspaceBySlug(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWorkspaceBySlugRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListWorkspaces(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListWorkspacesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceFeedbackWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceFeedbackRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceFeedback(ctx context.Context, body UpdateWorkspaceFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceFeedbackRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspace(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceNameWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceNameRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateWorkspaceName(ctx context.Context, body UpdateWorkspaceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateWorkspaceNameRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateConnectionRequest calls the generic CreateConnection builder with application/json body
func NewCreateConnectionRequest(server string, body CreateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateConnectionRequestWithBody generates requests for CreateConnection with any type of body
func NewCreateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteConnectionRequest calls the generic DeleteConnection builder with application/json body
func NewDeleteConnectionRequest(server string, body DeleteConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteConnectionRequestWithBody generates requests for DeleteConnection with any type of body
func NewDeleteConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetConnectionRequest calls the generic GetConnection builder with application/json body
func NewGetConnectionRequest(server string, body GetConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetConnectionRequestWithBody generates requests for GetConnection with any type of body
func NewGetConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConnectionsForWorkspaceRequest calls the generic ListConnectionsForWorkspace builder with application/json body
func NewListConnectionsForWorkspaceRequest(server string, body ListConnectionsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListConnectionsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListConnectionsForWorkspaceRequestWithBody generates requests for ListConnectionsForWorkspace with any type of body
func NewListConnectionsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAllConnectionsForWorkspaceRequest calls the generic ListAllConnectionsForWorkspace builder with application/json body
func NewListAllConnectionsForWorkspaceRequest(server string, body ListAllConnectionsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListAllConnectionsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListAllConnectionsForWorkspaceRequestWithBody generates requests for ListAllConnectionsForWorkspace with any type of body
func NewListAllConnectionsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/list_all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewResetConnectionRequest calls the generic ResetConnection builder with application/json body
func NewResetConnectionRequest(server string, body ResetConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewResetConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewResetConnectionRequestWithBody generates requests for ResetConnection with any type of body
func NewResetConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/reset")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchConnectionsRequest calls the generic SearchConnections builder with application/json body
func NewSearchConnectionsRequest(server string, body SearchConnectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchConnectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchConnectionsRequestWithBody generates requests for SearchConnections with any type of body
func NewSearchConnectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSyncConnectionRequest calls the generic SyncConnection builder with application/json body
func NewSyncConnectionRequest(server string, body SyncConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSyncConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewSyncConnectionRequestWithBody generates requests for SyncConnection with any type of body
func NewSyncConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/sync")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateConnectionRequest calls the generic UpdateConnection builder with application/json body
func NewUpdateConnectionRequest(server string, body UpdateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateConnectionRequestWithBody generates requests for UpdateConnection with any type of body
func NewUpdateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/connections/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMigrationsRequest calls the generic ListMigrations builder with application/json body
func NewListMigrationsRequest(server string, body ListMigrationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListMigrationsRequestWithBody(server, "application/json", bodyReader)
}

// NewListMigrationsRequestWithBody generates requests for ListMigrations with any type of body
func NewListMigrationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/db_migrations/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteMigrationsRequest calls the generic ExecuteMigrations builder with application/json body
func NewExecuteMigrationsRequest(server string, body ExecuteMigrationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteMigrationsRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteMigrationsRequestWithBody generates requests for ExecuteMigrations with any type of body
func NewExecuteMigrationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/db_migrations/migrate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExportArchiveRequest generates requests for ExportArchive
func NewExportArchiveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deployment/export")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewExportWorkspaceRequest calls the generic ExportWorkspace builder with application/json body
func NewExportWorkspaceRequest(server string, body ExportWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExportWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewExportWorkspaceRequestWithBody generates requests for ExportWorkspace with any type of body
func NewExportWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deployment/export_workspace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportArchiveRequestWithBody generates requests for ImportArchive with any type of body
func NewImportArchiveRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deployment/import")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewImportIntoWorkspaceRequest calls the generic ImportIntoWorkspace builder with application/json body
func NewImportIntoWorkspaceRequest(server string, body ImportIntoWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewImportIntoWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewImportIntoWorkspaceRequestWithBody generates requests for ImportIntoWorkspace with any type of body
func NewImportIntoWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deployment/import_into_workspace")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadArchiveResourceRequestWithBody generates requests for UploadArchiveResource with any type of body
func NewUploadArchiveResourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/deployment/upload_archive_resource")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDestinationDefinitionSpecificationRequest calls the generic GetDestinationDefinitionSpecification builder with application/json body
func NewGetDestinationDefinitionSpecificationRequest(server string, body GetDestinationDefinitionSpecificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDestinationDefinitionSpecificationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDestinationDefinitionSpecificationRequestWithBody generates requests for GetDestinationDefinitionSpecification with any type of body
func NewGetDestinationDefinitionSpecificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definition_specifications/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDestinationDefinitionRequest calls the generic CreateDestinationDefinition builder with application/json body
func NewCreateDestinationDefinitionRequest(server string, body CreateDestinationDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDestinationDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDestinationDefinitionRequestWithBody generates requests for CreateDestinationDefinition with any type of body
func NewCreateDestinationDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDestinationDefinitionRequest calls the generic DeleteDestinationDefinition builder with application/json body
func NewDeleteDestinationDefinitionRequest(server string, body DeleteDestinationDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDestinationDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteDestinationDefinitionRequestWithBody generates requests for DeleteDestinationDefinition with any type of body
func NewDeleteDestinationDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDestinationDefinitionRequest calls the generic GetDestinationDefinition builder with application/json body
func NewGetDestinationDefinitionRequest(server string, body GetDestinationDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDestinationDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDestinationDefinitionRequestWithBody generates requests for GetDestinationDefinition with any type of body
func NewGetDestinationDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDestinationDefinitionsRequest generates requests for ListDestinationDefinitions
func NewListDestinationDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLatestDestinationDefinitionsRequest generates requests for ListLatestDestinationDefinitions
func NewListLatestDestinationDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/list_latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDestinationDefinitionRequest calls the generic UpdateDestinationDefinition builder with application/json body
func NewUpdateDestinationDefinitionRequest(server string, body UpdateDestinationDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDestinationDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDestinationDefinitionRequestWithBody generates requests for UpdateDestinationDefinition with any type of body
func NewUpdateDestinationDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_definitions/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteDestinationOAuthRequest calls the generic CompleteDestinationOAuth builder with application/json body
func NewCompleteDestinationOAuthRequest(server string, body CompleteDestinationOAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteDestinationOAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewCompleteDestinationOAuthRequestWithBody generates requests for CompleteDestinationOAuth with any type of body
func NewCompleteDestinationOAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_oauths/complete_oauth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDestinationOAuthConsentRequest calls the generic GetDestinationOAuthConsent builder with application/json body
func NewGetDestinationOAuthConsentRequest(server string, body GetDestinationOAuthConsentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDestinationOAuthConsentRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDestinationOAuthConsentRequestWithBody generates requests for GetDestinationOAuthConsent with any type of body
func NewGetDestinationOAuthConsentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_oauths/get_consent_url")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetInstancewideDestinationOauthParamsRequest calls the generic SetInstancewideDestinationOauthParams builder with application/json body
func NewSetInstancewideDestinationOauthParamsRequest(server string, body SetInstancewideDestinationOauthParamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetInstancewideDestinationOauthParamsRequestWithBody(server, "application/json", bodyReader)
}

// NewSetInstancewideDestinationOauthParamsRequestWithBody generates requests for SetInstancewideDestinationOauthParams with any type of body
func NewSetInstancewideDestinationOauthParamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destination_oauths/oauth_params/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToDestinationRequest calls the generic CheckConnectionToDestination builder with application/json body
func NewCheckConnectionToDestinationRequest(server string, body CheckConnectionToDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToDestinationRequestWithBody generates requests for CheckConnectionToDestination with any type of body
func NewCheckConnectionToDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToDestinationForUpdateRequest calls the generic CheckConnectionToDestinationForUpdate builder with application/json body
func NewCheckConnectionToDestinationForUpdateRequest(server string, body CheckConnectionToDestinationForUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToDestinationForUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToDestinationForUpdateRequestWithBody generates requests for CheckConnectionToDestinationForUpdate with any type of body
func NewCheckConnectionToDestinationForUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/check_connection_for_update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateDestinationRequest calls the generic CreateDestination builder with application/json body
func NewCreateDestinationRequest(server string, body CreateDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDestinationRequestWithBody generates requests for CreateDestination with any type of body
func NewCreateDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteDestinationRequest calls the generic DeleteDestination builder with application/json body
func NewDeleteDestinationRequest(server string, body DeleteDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteDestinationRequestWithBody generates requests for DeleteDestination with any type of body
func NewDeleteDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDestinationRequest calls the generic GetDestination builder with application/json body
func NewGetDestinationRequest(server string, body GetDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetDestinationRequestWithBody generates requests for GetDestination with any type of body
func NewGetDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDestinationsForWorkspaceRequest calls the generic ListDestinationsForWorkspace builder with application/json body
func NewListDestinationsForWorkspaceRequest(server string, body ListDestinationsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListDestinationsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListDestinationsForWorkspaceRequestWithBody generates requests for ListDestinationsForWorkspace with any type of body
func NewListDestinationsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchDestinationsRequest calls the generic SearchDestinations builder with application/json body
func NewSearchDestinationsRequest(server string, body SearchDestinationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchDestinationsRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchDestinationsRequestWithBody generates requests for SearchDestinations with any type of body
func NewSearchDestinationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateDestinationRequest calls the generic UpdateDestination builder with application/json body
func NewUpdateDestinationRequest(server string, body UpdateDestinationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDestinationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateDestinationRequestWithBody generates requests for UpdateDestination with any type of body
func NewUpdateDestinationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/destinations/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthCheckRequest generates requests for GetHealthCheck
func NewGetHealthCheckRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCancelJobRequest calls the generic CancelJob builder with application/json body
func NewCancelJobRequest(server string, body CancelJobJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCancelJobRequestWithBody(server, "application/json", bodyReader)
}

// NewCancelJobRequestWithBody generates requests for CancelJob with any type of body
func NewCancelJobRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/cancel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobInfoRequest calls the generic GetJobInfo builder with application/json body
func NewGetJobInfoRequest(server string, body GetJobInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetJobInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetJobInfoRequestWithBody generates requests for GetJobInfo with any type of body
func NewGetJobInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetJobDebugInfoRequest calls the generic GetJobDebugInfo builder with application/json body
func NewGetJobDebugInfoRequest(server string, body GetJobDebugInfoJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetJobDebugInfoRequestWithBody(server, "application/json", bodyReader)
}

// NewGetJobDebugInfoRequestWithBody generates requests for GetJobDebugInfo with any type of body
func NewGetJobDebugInfoRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/get_debug_info")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListJobsForRequest calls the generic ListJobsFor builder with application/json body
func NewListJobsForRequest(server string, body ListJobsForJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListJobsForRequestWithBody(server, "application/json", bodyReader)
}

// NewListJobsForRequestWithBody generates requests for ListJobsFor with any type of body
func NewListJobsForRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/jobs/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetLogsRequest calls the generic GetLogs builder with application/json body
func NewGetLogsRequest(server string, body GetLogsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetLogsRequestWithBody(server, "application/json", bodyReader)
}

// NewGetLogsRequestWithBody generates requests for GetLogs with any type of body
func NewGetLogsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/logs/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewTryNotificationConfigRequest calls the generic TryNotificationConfig builder with application/json body
func NewTryNotificationConfigRequest(server string, body TryNotificationConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewTryNotificationConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewTryNotificationConfigRequestWithBody generates requests for TryNotificationConfig with any type of body
func NewTryNotificationConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/notifications/try")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOpenApiSpecRequest generates requests for GetOpenApiSpec
func NewGetOpenApiSpecRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/openapi")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckOperationRequest calls the generic CheckOperation builder with application/json body
func NewCheckOperationRequest(server string, body CheckOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckOperationRequestWithBody generates requests for CheckOperation with any type of body
func NewCheckOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/check")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateOperationRequest calls the generic CreateOperation builder with application/json body
func NewCreateOperationRequest(server string, body CreateOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOperationRequestWithBody generates requests for CreateOperation with any type of body
func NewCreateOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOperationRequest calls the generic DeleteOperation builder with application/json body
func NewDeleteOperationRequest(server string, body DeleteOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteOperationRequestWithBody generates requests for DeleteOperation with any type of body
func NewDeleteOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOperationRequest calls the generic GetOperation builder with application/json body
func NewGetOperationRequest(server string, body GetOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetOperationRequestWithBody generates requests for GetOperation with any type of body
func NewGetOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListOperationsForConnectionRequest calls the generic ListOperationsForConnection builder with application/json body
func NewListOperationsForConnectionRequest(server string, body ListOperationsForConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListOperationsForConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewListOperationsForConnectionRequestWithBody generates requests for ListOperationsForConnection with any type of body
func NewListOperationsForConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateOperationRequest calls the generic UpdateOperation builder with application/json body
func NewUpdateOperationRequest(server string, body UpdateOperationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateOperationRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateOperationRequestWithBody generates requests for UpdateOperation with any type of body
func NewUpdateOperationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/operations/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteDestinationCheckConnectionRequest calls the generic ExecuteDestinationCheckConnection builder with application/json body
func NewExecuteDestinationCheckConnectionRequest(server string, body ExecuteDestinationCheckConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteDestinationCheckConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteDestinationCheckConnectionRequestWithBody generates requests for ExecuteDestinationCheckConnection with any type of body
func NewExecuteDestinationCheckConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scheduler/destinations/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteSourceCheckConnectionRequest calls the generic ExecuteSourceCheckConnection builder with application/json body
func NewExecuteSourceCheckConnectionRequest(server string, body ExecuteSourceCheckConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteSourceCheckConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteSourceCheckConnectionRequestWithBody generates requests for ExecuteSourceCheckConnection with any type of body
func NewExecuteSourceCheckConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scheduler/sources/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewExecuteSourceDiscoverSchemaRequest calls the generic ExecuteSourceDiscoverSchema builder with application/json body
func NewExecuteSourceDiscoverSchemaRequest(server string, body ExecuteSourceDiscoverSchemaJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewExecuteSourceDiscoverSchemaRequestWithBody(server, "application/json", bodyReader)
}

// NewExecuteSourceDiscoverSchemaRequestWithBody generates requests for ExecuteSourceDiscoverSchema with any type of body
func NewExecuteSourceDiscoverSchemaRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/scheduler/sources/discover_schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceDefinitionSpecificationRequest calls the generic GetSourceDefinitionSpecification builder with application/json body
func NewGetSourceDefinitionSpecificationRequest(server string, body GetSourceDefinitionSpecificationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSourceDefinitionSpecificationRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSourceDefinitionSpecificationRequestWithBody generates requests for GetSourceDefinitionSpecification with any type of body
func NewGetSourceDefinitionSpecificationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definition_specifications/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSourceDefinitionRequest calls the generic CreateSourceDefinition builder with application/json body
func NewCreateSourceDefinitionRequest(server string, body CreateSourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSourceDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSourceDefinitionRequestWithBody generates requests for CreateSourceDefinition with any type of body
func NewCreateSourceDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSourceDefinitionRequest calls the generic DeleteSourceDefinition builder with application/json body
func NewDeleteSourceDefinitionRequest(server string, body DeleteSourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSourceDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSourceDefinitionRequestWithBody generates requests for DeleteSourceDefinition with any type of body
func NewDeleteSourceDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceDefinitionRequest calls the generic GetSourceDefinition builder with application/json body
func NewGetSourceDefinitionRequest(server string, body GetSourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSourceDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSourceDefinitionRequestWithBody generates requests for GetSourceDefinition with any type of body
func NewGetSourceDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSourceDefinitionsRequest generates requests for ListSourceDefinitions
func NewListSourceDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListLatestSourceDefinitionsRequest generates requests for ListLatestSourceDefinitions
func NewListLatestSourceDefinitionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/list_latest")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSourceDefinitionRequest calls the generic UpdateSourceDefinition builder with application/json body
func NewUpdateSourceDefinitionRequest(server string, body UpdateSourceDefinitionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSourceDefinitionRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSourceDefinitionRequestWithBody generates requests for UpdateSourceDefinition with any type of body
func NewUpdateSourceDefinitionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_definitions/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCompleteSourceOAuthRequest calls the generic CompleteSourceOAuth builder with application/json body
func NewCompleteSourceOAuthRequest(server string, body CompleteSourceOAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCompleteSourceOAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewCompleteSourceOAuthRequestWithBody generates requests for CompleteSourceOAuth with any type of body
func NewCompleteSourceOAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_oauths/complete_oauth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceOAuthConsentRequest calls the generic GetSourceOAuthConsent builder with application/json body
func NewGetSourceOAuthConsentRequest(server string, body GetSourceOAuthConsentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSourceOAuthConsentRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSourceOAuthConsentRequestWithBody generates requests for GetSourceOAuthConsent with any type of body
func NewGetSourceOAuthConsentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_oauths/get_consent_url")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSetInstancewideSourceOauthParamsRequest calls the generic SetInstancewideSourceOauthParams builder with application/json body
func NewSetInstancewideSourceOauthParamsRequest(server string, body SetInstancewideSourceOauthParamsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSetInstancewideSourceOauthParamsRequestWithBody(server, "application/json", bodyReader)
}

// NewSetInstancewideSourceOauthParamsRequestWithBody generates requests for SetInstancewideSourceOauthParams with any type of body
func NewSetInstancewideSourceOauthParamsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/source_oauths/oauth_params/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToSourceRequest calls the generic CheckConnectionToSource builder with application/json body
func NewCheckConnectionToSourceRequest(server string, body CheckConnectionToSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToSourceRequestWithBody generates requests for CheckConnectionToSource with any type of body
func NewCheckConnectionToSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/check_connection")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckConnectionToSourceForUpdateRequest calls the generic CheckConnectionToSourceForUpdate builder with application/json body
func NewCheckConnectionToSourceForUpdateRequest(server string, body CheckConnectionToSourceForUpdateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckConnectionToSourceForUpdateRequestWithBody(server, "application/json", bodyReader)
}

// NewCheckConnectionToSourceForUpdateRequestWithBody generates requests for CheckConnectionToSourceForUpdate with any type of body
func NewCheckConnectionToSourceForUpdateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/check_connection_for_update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSourceRequest calls the generic CreateSource builder with application/json body
func NewCreateSourceRequest(server string, body CreateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateSourceRequestWithBody generates requests for CreateSource with any type of body
func NewCreateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSourceRequest calls the generic DeleteSource builder with application/json body
func NewDeleteSourceRequest(server string, body DeleteSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteSourceRequestWithBody generates requests for DeleteSource with any type of body
func NewDeleteSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDiscoverSchemaForSourceRequest calls the generic DiscoverSchemaForSource builder with application/json body
func NewDiscoverSchemaForSourceRequest(server string, body DiscoverSchemaForSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDiscoverSchemaForSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewDiscoverSchemaForSourceRequestWithBody generates requests for DiscoverSchemaForSource with any type of body
func NewDiscoverSchemaForSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/discover_schema")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSourceRequest calls the generic GetSource builder with application/json body
func NewGetSourceRequest(server string, body GetSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetSourceRequestWithBody generates requests for GetSource with any type of body
func NewGetSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSourcesForWorkspaceRequest calls the generic ListSourcesForWorkspace builder with application/json body
func NewListSourcesForWorkspaceRequest(server string, body ListSourcesForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewListSourcesForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewListSourcesForWorkspaceRequestWithBody generates requests for ListSourcesForWorkspace with any type of body
func NewListSourcesForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewSearchSourcesRequest calls the generic SearchSources builder with application/json body
func NewSearchSourcesRequest(server string, body SearchSourcesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewSearchSourcesRequestWithBody(server, "application/json", bodyReader)
}

// NewSearchSourcesRequestWithBody generates requests for SearchSources with any type of body
func NewSearchSourcesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSourceRequest calls the generic UpdateSource builder with application/json body
func NewUpdateSourceRequest(server string, body UpdateSourceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSourceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateSourceRequestWithBody generates requests for UpdateSource with any type of body
func NewUpdateSourceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/sources/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStateRequest calls the generic GetState builder with application/json body
func NewGetStateRequest(server string, body GetStateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetStateRequestWithBody(server, "application/json", bodyReader)
}

// NewGetStateRequestWithBody generates requests for GetState with any type of body
func NewGetStateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/state/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendCreateConnectionRequest calls the generic WebBackendCreateConnection builder with application/json body
func NewWebBackendCreateConnectionRequest(server string, body WebBackendCreateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendCreateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendCreateConnectionRequestWithBody generates requests for WebBackendCreateConnection with any type of body
func NewWebBackendCreateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendGetConnectionRequest calls the generic WebBackendGetConnection builder with application/json body
func NewWebBackendGetConnectionRequest(server string, body WebBackendGetConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendGetConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendGetConnectionRequestWithBody generates requests for WebBackendGetConnection with any type of body
func NewWebBackendGetConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendListConnectionsForWorkspaceRequest calls the generic WebBackendListConnectionsForWorkspace builder with application/json body
func NewWebBackendListConnectionsForWorkspaceRequest(server string, body WebBackendListConnectionsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendListConnectionsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendListConnectionsForWorkspaceRequestWithBody generates requests for WebBackendListConnectionsForWorkspace with any type of body
func NewWebBackendListConnectionsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendListAllConnectionsForWorkspaceRequest calls the generic WebBackendListAllConnectionsForWorkspace builder with application/json body
func NewWebBackendListAllConnectionsForWorkspaceRequest(server string, body WebBackendListAllConnectionsForWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendListAllConnectionsForWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendListAllConnectionsForWorkspaceRequestWithBody generates requests for WebBackendListAllConnectionsForWorkspace with any type of body
func NewWebBackendListAllConnectionsForWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/list_all")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendSearchConnectionsRequest calls the generic WebBackendSearchConnections builder with application/json body
func NewWebBackendSearchConnectionsRequest(server string, body WebBackendSearchConnectionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendSearchConnectionsRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendSearchConnectionsRequestWithBody generates requests for WebBackendSearchConnections with any type of body
func NewWebBackendSearchConnectionsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewWebBackendUpdateConnectionRequest calls the generic WebBackendUpdateConnection builder with application/json body
func NewWebBackendUpdateConnectionRequest(server string, body WebBackendUpdateConnectionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewWebBackendUpdateConnectionRequestWithBody(server, "application/json", bodyReader)
}

// NewWebBackendUpdateConnectionRequestWithBody generates requests for WebBackendUpdateConnection with any type of body
func NewWebBackendUpdateConnectionRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/web_backend/connections/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateWorkspaceRequest calls the generic CreateWorkspace builder with application/json body
func NewCreateWorkspaceRequest(server string, body CreateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateWorkspaceRequestWithBody generates requests for CreateWorkspace with any type of body
func NewCreateWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/create")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWorkspaceRequest calls the generic DeleteWorkspace builder with application/json body
func NewDeleteWorkspaceRequest(server string, body DeleteWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteWorkspaceRequestWithBody generates requests for DeleteWorkspace with any type of body
func NewDeleteWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspaceRequest calls the generic GetWorkspace builder with application/json body
func NewGetWorkspaceRequest(server string, body GetWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewGetWorkspaceRequestWithBody generates requests for GetWorkspace with any type of body
func NewGetWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/get")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWorkspaceBySlugRequest calls the generic GetWorkspaceBySlug builder with application/json body
func NewGetWorkspaceBySlugRequest(server string, body GetWorkspaceBySlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewGetWorkspaceBySlugRequestWithBody(server, "application/json", bodyReader)
}

// NewGetWorkspaceBySlugRequestWithBody generates requests for GetWorkspaceBySlug with any type of body
func NewGetWorkspaceBySlugRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/get_by_slug")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListWorkspacesRequest generates requests for ListWorkspaces
func NewListWorkspacesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/list")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateWorkspaceFeedbackRequest calls the generic UpdateWorkspaceFeedback builder with application/json body
func NewUpdateWorkspaceFeedbackRequest(server string, body UpdateWorkspaceFeedbackJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceFeedbackRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateWorkspaceFeedbackRequestWithBody generates requests for UpdateWorkspaceFeedback with any type of body
func NewUpdateWorkspaceFeedbackRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/tag_feedback_status_as_done")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateWorkspaceRequest calls the generic UpdateWorkspace builder with application/json body
func NewUpdateWorkspaceRequest(server string, body UpdateWorkspaceJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateWorkspaceRequestWithBody generates requests for UpdateWorkspace with any type of body
func NewUpdateWorkspaceRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/update")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateWorkspaceNameRequest calls the generic UpdateWorkspaceName builder with application/json body
func NewUpdateWorkspaceNameRequest(server string, body UpdateWorkspaceNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateWorkspaceNameRequestWithBody(server, "application/json", bodyReader)
}

// NewUpdateWorkspaceNameRequestWithBody generates requests for UpdateWorkspaceName with any type of body
func NewUpdateWorkspaceNameRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/workspaces/update_name")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateConnection request with any body
	CreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	CreateConnectionWithResponse(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error)

	// DeleteConnection request with any body
	DeleteConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error)

	DeleteConnectionWithResponse(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error)

	// GetConnection request with any body
	GetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error)

	GetConnectionWithResponse(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error)

	// ListConnectionsForWorkspace request with any body
	ListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error)

	ListConnectionsForWorkspaceWithResponse(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error)

	// ListAllConnectionsForWorkspace request with any body
	ListAllConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListAllConnectionsForWorkspaceResponse, error)

	ListAllConnectionsForWorkspaceWithResponse(ctx context.Context, body ListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListAllConnectionsForWorkspaceResponse, error)

	// ResetConnection request with any body
	ResetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error)

	ResetConnectionWithResponse(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error)

	// SearchConnections request with any body
	SearchConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchConnectionsResponse, error)

	SearchConnectionsWithResponse(ctx context.Context, body SearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchConnectionsResponse, error)

	// SyncConnection request with any body
	SyncConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error)

	SyncConnectionWithResponse(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error)

	// UpdateConnection request with any body
	UpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	UpdateConnectionWithResponse(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error)

	// ListMigrations request with any body
	ListMigrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListMigrationsResponse, error)

	ListMigrationsWithResponse(ctx context.Context, body ListMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListMigrationsResponse, error)

	// ExecuteMigrations request with any body
	ExecuteMigrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteMigrationsResponse, error)

	ExecuteMigrationsWithResponse(ctx context.Context, body ExecuteMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteMigrationsResponse, error)

	// ExportArchive request
	ExportArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExportArchiveResponse, error)

	// ExportWorkspace request with any body
	ExportWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportWorkspaceResponse, error)

	ExportWorkspaceWithResponse(ctx context.Context, body ExportWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ExportWorkspaceResponse, error)

	// ImportArchive request with any body
	ImportArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportArchiveResponse, error)

	// ImportIntoWorkspace request with any body
	ImportIntoWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportIntoWorkspaceResponse, error)

	ImportIntoWorkspaceWithResponse(ctx context.Context, body ImportIntoWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportIntoWorkspaceResponse, error)

	// UploadArchiveResource request with any body
	UploadArchiveResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadArchiveResourceResponse, error)

	// GetDestinationDefinitionSpecification request with any body
	GetDestinationDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error)

	GetDestinationDefinitionSpecificationWithResponse(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error)

	// CreateDestinationDefinition request with any body
	CreateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error)

	CreateDestinationDefinitionWithResponse(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error)

	// DeleteDestinationDefinition request with any body
	DeleteDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDestinationDefinitionResponse, error)

	DeleteDestinationDefinitionWithResponse(ctx context.Context, body DeleteDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDestinationDefinitionResponse, error)

	// GetDestinationDefinition request with any body
	GetDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error)

	GetDestinationDefinitionWithResponse(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error)

	// ListDestinationDefinitions request
	ListDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDestinationDefinitionsResponse, error)

	// ListLatestDestinationDefinitions request
	ListLatestDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestDestinationDefinitionsResponse, error)

	// UpdateDestinationDefinition request with any body
	UpdateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error)

	UpdateDestinationDefinitionWithResponse(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error)

	// CompleteDestinationOAuth request with any body
	CompleteDestinationOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteDestinationOAuthResponse, error)

	CompleteDestinationOAuthWithResponse(ctx context.Context, body CompleteDestinationOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteDestinationOAuthResponse, error)

	// GetDestinationOAuthConsent request with any body
	GetDestinationOAuthConsentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationOAuthConsentResponse, error)

	GetDestinationOAuthConsentWithResponse(ctx context.Context, body GetDestinationOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationOAuthConsentResponse, error)

	// SetInstancewideDestinationOauthParams request with any body
	SetInstancewideDestinationOauthParamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetInstancewideDestinationOauthParamsResponse, error)

	SetInstancewideDestinationOauthParamsWithResponse(ctx context.Context, body SetInstancewideDestinationOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetInstancewideDestinationOauthParamsResponse, error)

	// CheckConnectionToDestination request with any body
	CheckConnectionToDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error)

	CheckConnectionToDestinationWithResponse(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error)

	// CheckConnectionToDestinationForUpdate request with any body
	CheckConnectionToDestinationForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error)

	CheckConnectionToDestinationForUpdateWithResponse(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error)

	// CreateDestination request with any body
	CreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error)

	CreateDestinationWithResponse(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error)

	// DeleteDestination request with any body
	DeleteDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error)

	DeleteDestinationWithResponse(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error)

	// GetDestination request with any body
	GetDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error)

	GetDestinationWithResponse(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error)

	// ListDestinationsForWorkspace request with any body
	ListDestinationsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error)

	ListDestinationsForWorkspaceWithResponse(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error)

	// SearchDestinations request with any body
	SearchDestinationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDestinationsResponse, error)

	SearchDestinationsWithResponse(ctx context.Context, body SearchDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDestinationsResponse, error)

	// UpdateDestination request with any body
	UpdateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error)

	UpdateDestinationWithResponse(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error)

	// GetHealthCheck request
	GetHealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthCheckResponse, error)

	// CancelJob request with any body
	CancelJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelJobResponse, error)

	CancelJobWithResponse(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelJobResponse, error)

	// GetJobInfo request with any body
	GetJobInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error)

	GetJobInfoWithResponse(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error)

	// GetJobDebugInfo request with any body
	GetJobDebugInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetJobDebugInfoResponse, error)

	GetJobDebugInfoWithResponse(ctx context.Context, body GetJobDebugInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetJobDebugInfoResponse, error)

	// ListJobsFor request with any body
	ListJobsForWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error)

	ListJobsForWithResponse(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error)

	// GetLogs request with any body
	GetLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogsResponse, error)

	GetLogsWithResponse(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogsResponse, error)

	// TryNotificationConfig request with any body
	TryNotificationConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error)

	TryNotificationConfigWithResponse(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error)

	// GetOpenApiSpec request
	GetOpenApiSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiSpecResponse, error)

	// CheckOperation request with any body
	CheckOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error)

	CheckOperationWithResponse(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error)

	// CreateOperation request with any body
	CreateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error)

	CreateOperationWithResponse(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error)

	// DeleteOperation request with any body
	DeleteOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error)

	DeleteOperationWithResponse(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error)

	// GetOperation request with any body
	GetOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOperationResponse, error)

	GetOperationWithResponse(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOperationResponse, error)

	// ListOperationsForConnection request with any body
	ListOperationsForConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error)

	ListOperationsForConnectionWithResponse(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error)

	// UpdateOperation request with any body
	UpdateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error)

	UpdateOperationWithResponse(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error)

	// ExecuteDestinationCheckConnection request with any body
	ExecuteDestinationCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error)

	ExecuteDestinationCheckConnectionWithResponse(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error)

	// ExecuteSourceCheckConnection request with any body
	ExecuteSourceCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error)

	ExecuteSourceCheckConnectionWithResponse(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error)

	// ExecuteSourceDiscoverSchema request with any body
	ExecuteSourceDiscoverSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error)

	ExecuteSourceDiscoverSchemaWithResponse(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error)

	// GetSourceDefinitionSpecification request with any body
	GetSourceDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error)

	GetSourceDefinitionSpecificationWithResponse(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error)

	// CreateSourceDefinition request with any body
	CreateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error)

	CreateSourceDefinitionWithResponse(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error)

	// DeleteSourceDefinition request with any body
	DeleteSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSourceDefinitionResponse, error)

	DeleteSourceDefinitionWithResponse(ctx context.Context, body DeleteSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSourceDefinitionResponse, error)

	// GetSourceDefinition request with any body
	GetSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error)

	GetSourceDefinitionWithResponse(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error)

	// ListSourceDefinitions request
	ListSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsResponse, error)

	// ListLatestSourceDefinitions request
	ListLatestSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestSourceDefinitionsResponse, error)

	// UpdateSourceDefinition request with any body
	UpdateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error)

	UpdateSourceDefinitionWithResponse(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error)

	// CompleteSourceOAuth request with any body
	CompleteSourceOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteSourceOAuthResponse, error)

	CompleteSourceOAuthWithResponse(ctx context.Context, body CompleteSourceOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteSourceOAuthResponse, error)

	// GetSourceOAuthConsent request with any body
	GetSourceOAuthConsentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceOAuthConsentResponse, error)

	GetSourceOAuthConsentWithResponse(ctx context.Context, body GetSourceOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceOAuthConsentResponse, error)

	// SetInstancewideSourceOauthParams request with any body
	SetInstancewideSourceOauthParamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetInstancewideSourceOauthParamsResponse, error)

	SetInstancewideSourceOauthParamsWithResponse(ctx context.Context, body SetInstancewideSourceOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetInstancewideSourceOauthParamsResponse, error)

	// CheckConnectionToSource request with any body
	CheckConnectionToSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error)

	CheckConnectionToSourceWithResponse(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error)

	// CheckConnectionToSourceForUpdate request with any body
	CheckConnectionToSourceForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error)

	CheckConnectionToSourceForUpdateWithResponse(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error)

	// CreateSource request with any body
	CreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error)

	CreateSourceWithResponse(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error)

	// DeleteSource request with any body
	DeleteSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error)

	DeleteSourceWithResponse(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error)

	// DiscoverSchemaForSource request with any body
	DiscoverSchemaForSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error)

	DiscoverSchemaForSourceWithResponse(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error)

	// GetSource request with any body
	GetSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceResponse, error)

	GetSourceWithResponse(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceResponse, error)

	// ListSourcesForWorkspace request with any body
	ListSourcesForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error)

	ListSourcesForWorkspaceWithResponse(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error)

	// SearchSources request with any body
	SearchSourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchSourcesResponse, error)

	SearchSourcesWithResponse(ctx context.Context, body SearchSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchSourcesResponse, error)

	// UpdateSource request with any body
	UpdateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error)

	UpdateSourceWithResponse(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error)

	// GetState request with any body
	GetStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStateResponse, error)

	GetStateWithResponse(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStateResponse, error)

	// WebBackendCreateConnection request with any body
	WebBackendCreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error)

	WebBackendCreateConnectionWithResponse(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error)

	// WebBackendGetConnection request with any body
	WebBackendGetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error)

	WebBackendGetConnectionWithResponse(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error)

	// WebBackendListConnectionsForWorkspace request with any body
	WebBackendListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error)

	WebBackendListConnectionsForWorkspaceWithResponse(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error)

	// WebBackendListAllConnectionsForWorkspace request with any body
	WebBackendListAllConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendListAllConnectionsForWorkspaceResponse, error)

	WebBackendListAllConnectionsForWorkspaceWithResponse(ctx context.Context, body WebBackendListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendListAllConnectionsForWorkspaceResponse, error)

	// WebBackendSearchConnections request with any body
	WebBackendSearchConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendSearchConnectionsResponse, error)

	WebBackendSearchConnectionsWithResponse(ctx context.Context, body WebBackendSearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendSearchConnectionsResponse, error)

	// WebBackendUpdateConnection request with any body
	WebBackendUpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error)

	WebBackendUpdateConnectionWithResponse(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error)

	// CreateWorkspace request with any body
	CreateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	CreateWorkspaceWithResponse(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error)

	// DeleteWorkspace request with any body
	DeleteWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	DeleteWorkspaceWithResponse(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error)

	// GetWorkspace request with any body
	GetWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	GetWorkspaceWithResponse(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error)

	// GetWorkspaceBySlug request with any body
	GetWorkspaceBySlugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error)

	GetWorkspaceBySlugWithResponse(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error)

	// ListWorkspaces request
	ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error)

	// UpdateWorkspaceFeedback request with any body
	UpdateWorkspaceFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceFeedbackResponse, error)

	UpdateWorkspaceFeedbackWithResponse(ctx context.Context, body UpdateWorkspaceFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceFeedbackResponse, error)

	// UpdateWorkspace request with any body
	UpdateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	UpdateWorkspaceWithResponse(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error)

	// UpdateWorkspaceName request with any body
	UpdateWorkspaceNameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceNameResponse, error)

	UpdateWorkspaceNameWithResponse(ctx context.Context, body UpdateWorkspaceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceNameResponse, error)
}

type CreateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CreateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DeleteConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectionsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ListConnectionsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectionsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllConnectionsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ListAllConnectionsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllConnectionsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ResetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ResetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ResetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionReadList
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r SearchConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SyncConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r SyncConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SyncConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMigrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DbMigrationReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ListMigrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMigrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteMigrationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DbMigrationExecutionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ExecuteMigrationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteMigrationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExportWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r ExportWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExportWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportArchiveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportRead
}

// Status returns HTTPResponse.Status
func (r ImportArchiveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportArchiveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ImportIntoWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ImportRead
	JSON404      *NotFoundKnownExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ImportIntoWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ImportIntoWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadArchiveResourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UploadRead
}

// Status returns HTTPResponse.Status
func (r UploadArchiveResourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadArchiveResourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationDefinitionSpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionSpecificationRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetDestinationDefinitionSpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationDefinitionSpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDestinationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CreateDestinationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDestinationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDestinationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DeleteDestinationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDestinationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetDestinationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDestinationDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListDestinationDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDestinationDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLatestDestinationDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListLatestDestinationDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLatestDestinationDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDestinationDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationDefinitionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateDestinationDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDestinationDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteDestinationOAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompleteOAuthResponse
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CompleteDestinationOAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteDestinationOAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationOAuthConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuthConsentRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetDestinationOAuthConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationOAuthConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetInstancewideDestinationOauthParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *KnownExceptionInfo
	JSON404      *NotFoundKnownExceptionInfo
}

// Status returns HTTPResponse.Status
func (r SetInstancewideDestinationOauthParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetInstancewideDestinationOauthParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToDestinationForUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToDestinationForUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToDestinationForUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CreateDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DeleteDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDestinationsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ListDestinationsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDestinationsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchDestinationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationReadList
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r SearchDestinationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchDestinationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDestinationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DestinationRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateDestinationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDestinationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthCheckResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HealthCheckRead
}

// Status returns HTTPResponse.Status
func (r GetHealthCheckResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthCheckResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CancelJobResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CancelJobResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CancelJobResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobInfoRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetJobInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetJobDebugInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobDebugInfoRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetJobDebugInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetJobDebugInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListJobsForResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *JobReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ListJobsForResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListJobsForResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetLogsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetLogsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetLogsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TryNotificationConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotificationRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r TryNotificationConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TryNotificationConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOpenApiSpecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOpenApiSpecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOpenApiSpecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckOperationRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CheckOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CreateOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DeleteOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOperationsForConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ListOperationsForConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOperationsForConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOperationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OperationRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateOperationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOperationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteDestinationCheckConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ExecuteDestinationCheckConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteDestinationCheckConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteSourceCheckConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ExecuteSourceCheckConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteSourceCheckConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ExecuteSourceDiscoverSchemaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDiscoverSchemaRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ExecuteSourceDiscoverSchemaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ExecuteSourceDiscoverSchemaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceDefinitionSpecificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionSpecificationRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetSourceDefinitionSpecificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceDefinitionSpecificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CreateSourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DeleteSourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetSourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourceDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListSourceDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourceDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListLatestSourceDefinitionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionReadList
}

// Status returns HTTPResponse.Status
func (r ListLatestSourceDefinitionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListLatestSourceDefinitionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSourceDefinitionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDefinitionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateSourceDefinitionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSourceDefinitionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CompleteSourceOAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CompleteOAuthResponse
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CompleteSourceOAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CompleteSourceOAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceOAuthConsentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *OAuthConsentRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetSourceOAuthConsentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceOAuthConsentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SetInstancewideSourceOauthParamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *KnownExceptionInfo
	JSON404      *NotFoundKnownExceptionInfo
}

// Status returns HTTPResponse.Status
func (r SetInstancewideSourceOauthParamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SetInstancewideSourceOauthParamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckConnectionToSourceForUpdateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CheckConnectionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CheckConnectionToSourceForUpdateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckConnectionToSourceForUpdateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CreateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DeleteSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DiscoverSchemaForSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceDiscoverSchemaRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DiscoverSchemaForSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DiscoverSchemaForSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSourcesForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r ListSourcesForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSourcesForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchSourcesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceReadList
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r SearchSourcesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchSourcesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSourceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SourceRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateSourceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSourceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionState
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetStateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendCreateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r WebBackendCreateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendCreateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendGetConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r WebBackendGetConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendGetConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendListConnectionsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r WebBackendListConnectionsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendListConnectionsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendListAllConnectionsForWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionReadList
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r WebBackendListAllConnectionsForWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendListAllConnectionsForWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendSearchConnectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionReadList
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r WebBackendSearchConnectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendSearchConnectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type WebBackendUpdateConnectionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WebBackendConnectionRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r WebBackendUpdateConnectionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r WebBackendUpdateConnectionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r CreateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r DeleteWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWorkspaceBySlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r GetWorkspaceBySlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWorkspaceBySlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListWorkspacesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceReadList
}

// Status returns HTTPResponse.Status
func (r ListWorkspacesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListWorkspacesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *NotFoundKnownExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateWorkspaceNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WorkspaceRead
	JSON404      *NotFoundKnownExceptionInfo
	JSON422      *InvalidInputExceptionInfo
}

// Status returns HTTPResponse.Status
func (r UpdateWorkspaceNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateWorkspaceNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateConnectionWithBodyWithResponse request with arbitrary body returning *CreateConnectionResponse
func (c *ClientWithResponses) CreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

func (c *ClientWithResponses) CreateConnectionWithResponse(ctx context.Context, body CreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateConnectionResponse, error) {
	rsp, err := c.CreateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateConnectionResponse(rsp)
}

// DeleteConnectionWithBodyWithResponse request with arbitrary body returning *DeleteConnectionResponse
func (c *ClientWithResponses) DeleteConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error) {
	rsp, err := c.DeleteConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionResponse(rsp)
}

func (c *ClientWithResponses) DeleteConnectionWithResponse(ctx context.Context, body DeleteConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteConnectionResponse, error) {
	rsp, err := c.DeleteConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectionResponse(rsp)
}

// GetConnectionWithBodyWithResponse request with arbitrary body returning *GetConnectionResponse
func (c *ClientWithResponses) GetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

func (c *ClientWithResponses) GetConnectionWithResponse(ctx context.Context, body GetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetConnectionResponse, error) {
	rsp, err := c.GetConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectionResponse(rsp)
}

// ListConnectionsForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListConnectionsForWorkspaceResponse
func (c *ClientWithResponses) ListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.ListConnectionsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListConnectionsForWorkspaceWithResponse(ctx context.Context, body ListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.ListConnectionsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectionsForWorkspaceResponse(rsp)
}

// ListAllConnectionsForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListAllConnectionsForWorkspaceResponse
func (c *ClientWithResponses) ListAllConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListAllConnectionsForWorkspaceResponse, error) {
	rsp, err := c.ListAllConnectionsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllConnectionsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListAllConnectionsForWorkspaceWithResponse(ctx context.Context, body ListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListAllConnectionsForWorkspaceResponse, error) {
	rsp, err := c.ListAllConnectionsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllConnectionsForWorkspaceResponse(rsp)
}

// ResetConnectionWithBodyWithResponse request with arbitrary body returning *ResetConnectionResponse
func (c *ClientWithResponses) ResetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error) {
	rsp, err := c.ResetConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetConnectionResponse(rsp)
}

func (c *ClientWithResponses) ResetConnectionWithResponse(ctx context.Context, body ResetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ResetConnectionResponse, error) {
	rsp, err := c.ResetConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseResetConnectionResponse(rsp)
}

// SearchConnectionsWithBodyWithResponse request with arbitrary body returning *SearchConnectionsResponse
func (c *ClientWithResponses) SearchConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchConnectionsResponse, error) {
	rsp, err := c.SearchConnectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchConnectionsResponse(rsp)
}

func (c *ClientWithResponses) SearchConnectionsWithResponse(ctx context.Context, body SearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchConnectionsResponse, error) {
	rsp, err := c.SearchConnections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchConnectionsResponse(rsp)
}

// SyncConnectionWithBodyWithResponse request with arbitrary body returning *SyncConnectionResponse
func (c *ClientWithResponses) SyncConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error) {
	rsp, err := c.SyncConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncConnectionResponse(rsp)
}

func (c *ClientWithResponses) SyncConnectionWithResponse(ctx context.Context, body SyncConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*SyncConnectionResponse, error) {
	rsp, err := c.SyncConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSyncConnectionResponse(rsp)
}

// UpdateConnectionWithBodyWithResponse request with arbitrary body returning *UpdateConnectionResponse
func (c *ClientWithResponses) UpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

func (c *ClientWithResponses) UpdateConnectionWithResponse(ctx context.Context, body UpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConnectionResponse, error) {
	rsp, err := c.UpdateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectionResponse(rsp)
}

// ListMigrationsWithBodyWithResponse request with arbitrary body returning *ListMigrationsResponse
func (c *ClientWithResponses) ListMigrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListMigrationsResponse, error) {
	rsp, err := c.ListMigrationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMigrationsResponse(rsp)
}

func (c *ClientWithResponses) ListMigrationsWithResponse(ctx context.Context, body ListMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ListMigrationsResponse, error) {
	rsp, err := c.ListMigrations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMigrationsResponse(rsp)
}

// ExecuteMigrationsWithBodyWithResponse request with arbitrary body returning *ExecuteMigrationsResponse
func (c *ClientWithResponses) ExecuteMigrationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteMigrationsResponse, error) {
	rsp, err := c.ExecuteMigrationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteMigrationsResponse(rsp)
}

func (c *ClientWithResponses) ExecuteMigrationsWithResponse(ctx context.Context, body ExecuteMigrationsJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteMigrationsResponse, error) {
	rsp, err := c.ExecuteMigrations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteMigrationsResponse(rsp)
}

// ExportArchiveWithResponse request returning *ExportArchiveResponse
func (c *ClientWithResponses) ExportArchiveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ExportArchiveResponse, error) {
	rsp, err := c.ExportArchive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportArchiveResponse(rsp)
}

// ExportWorkspaceWithBodyWithResponse request with arbitrary body returning *ExportWorkspaceResponse
func (c *ClientWithResponses) ExportWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExportWorkspaceResponse, error) {
	rsp, err := c.ExportWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ExportWorkspaceWithResponse(ctx context.Context, body ExportWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ExportWorkspaceResponse, error) {
	rsp, err := c.ExportWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExportWorkspaceResponse(rsp)
}

// ImportArchiveWithBodyWithResponse request with arbitrary body returning *ImportArchiveResponse
func (c *ClientWithResponses) ImportArchiveWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportArchiveResponse, error) {
	rsp, err := c.ImportArchiveWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportArchiveResponse(rsp)
}

// ImportIntoWorkspaceWithBodyWithResponse request with arbitrary body returning *ImportIntoWorkspaceResponse
func (c *ClientWithResponses) ImportIntoWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ImportIntoWorkspaceResponse, error) {
	rsp, err := c.ImportIntoWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportIntoWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ImportIntoWorkspaceWithResponse(ctx context.Context, body ImportIntoWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ImportIntoWorkspaceResponse, error) {
	rsp, err := c.ImportIntoWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseImportIntoWorkspaceResponse(rsp)
}

// UploadArchiveResourceWithBodyWithResponse request with arbitrary body returning *UploadArchiveResourceResponse
func (c *ClientWithResponses) UploadArchiveResourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadArchiveResourceResponse, error) {
	rsp, err := c.UploadArchiveResourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadArchiveResourceResponse(rsp)
}

// GetDestinationDefinitionSpecificationWithBodyWithResponse request with arbitrary body returning *GetDestinationDefinitionSpecificationResponse
func (c *ClientWithResponses) GetDestinationDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error) {
	rsp, err := c.GetDestinationDefinitionSpecificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionSpecificationResponse(rsp)
}

func (c *ClientWithResponses) GetDestinationDefinitionSpecificationWithResponse(ctx context.Context, body GetDestinationDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionSpecificationResponse, error) {
	rsp, err := c.GetDestinationDefinitionSpecification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionSpecificationResponse(rsp)
}

// CreateDestinationDefinitionWithBodyWithResponse request with arbitrary body returning *CreateDestinationDefinitionResponse
func (c *ClientWithResponses) CreateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error) {
	rsp, err := c.CreateDestinationDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateDestinationDefinitionWithResponse(ctx context.Context, body CreateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationDefinitionResponse, error) {
	rsp, err := c.CreateDestinationDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationDefinitionResponse(rsp)
}

// DeleteDestinationDefinitionWithBodyWithResponse request with arbitrary body returning *DeleteDestinationDefinitionResponse
func (c *ClientWithResponses) DeleteDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDestinationDefinitionResponse, error) {
	rsp, err := c.DeleteDestinationDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDestinationDefinitionResponse(rsp)
}

func (c *ClientWithResponses) DeleteDestinationDefinitionWithResponse(ctx context.Context, body DeleteDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDestinationDefinitionResponse, error) {
	rsp, err := c.DeleteDestinationDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDestinationDefinitionResponse(rsp)
}

// GetDestinationDefinitionWithBodyWithResponse request with arbitrary body returning *GetDestinationDefinitionResponse
func (c *ClientWithResponses) GetDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error) {
	rsp, err := c.GetDestinationDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionResponse(rsp)
}

func (c *ClientWithResponses) GetDestinationDefinitionWithResponse(ctx context.Context, body GetDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationDefinitionResponse, error) {
	rsp, err := c.GetDestinationDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationDefinitionResponse(rsp)
}

// ListDestinationDefinitionsWithResponse request returning *ListDestinationDefinitionsResponse
func (c *ClientWithResponses) ListDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListDestinationDefinitionsResponse, error) {
	rsp, err := c.ListDestinationDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDestinationDefinitionsResponse(rsp)
}

// ListLatestDestinationDefinitionsWithResponse request returning *ListLatestDestinationDefinitionsResponse
func (c *ClientWithResponses) ListLatestDestinationDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestDestinationDefinitionsResponse, error) {
	rsp, err := c.ListLatestDestinationDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLatestDestinationDefinitionsResponse(rsp)
}

// UpdateDestinationDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateDestinationDefinitionResponse
func (c *ClientWithResponses) UpdateDestinationDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error) {
	rsp, err := c.UpdateDestinationDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateDestinationDefinitionWithResponse(ctx context.Context, body UpdateDestinationDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationDefinitionResponse, error) {
	rsp, err := c.UpdateDestinationDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationDefinitionResponse(rsp)
}

// CompleteDestinationOAuthWithBodyWithResponse request with arbitrary body returning *CompleteDestinationOAuthResponse
func (c *ClientWithResponses) CompleteDestinationOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteDestinationOAuthResponse, error) {
	rsp, err := c.CompleteDestinationOAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteDestinationOAuthResponse(rsp)
}

func (c *ClientWithResponses) CompleteDestinationOAuthWithResponse(ctx context.Context, body CompleteDestinationOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteDestinationOAuthResponse, error) {
	rsp, err := c.CompleteDestinationOAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteDestinationOAuthResponse(rsp)
}

// GetDestinationOAuthConsentWithBodyWithResponse request with arbitrary body returning *GetDestinationOAuthConsentResponse
func (c *ClientWithResponses) GetDestinationOAuthConsentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationOAuthConsentResponse, error) {
	rsp, err := c.GetDestinationOAuthConsentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationOAuthConsentResponse(rsp)
}

func (c *ClientWithResponses) GetDestinationOAuthConsentWithResponse(ctx context.Context, body GetDestinationOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationOAuthConsentResponse, error) {
	rsp, err := c.GetDestinationOAuthConsent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationOAuthConsentResponse(rsp)
}

// SetInstancewideDestinationOauthParamsWithBodyWithResponse request with arbitrary body returning *SetInstancewideDestinationOauthParamsResponse
func (c *ClientWithResponses) SetInstancewideDestinationOauthParamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetInstancewideDestinationOauthParamsResponse, error) {
	rsp, err := c.SetInstancewideDestinationOauthParamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetInstancewideDestinationOauthParamsResponse(rsp)
}

func (c *ClientWithResponses) SetInstancewideDestinationOauthParamsWithResponse(ctx context.Context, body SetInstancewideDestinationOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetInstancewideDestinationOauthParamsResponse, error) {
	rsp, err := c.SetInstancewideDestinationOauthParams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetInstancewideDestinationOauthParamsResponse(rsp)
}

// CheckConnectionToDestinationWithBodyWithResponse request with arbitrary body returning *CheckConnectionToDestinationResponse
func (c *ClientWithResponses) CheckConnectionToDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error) {
	rsp, err := c.CheckConnectionToDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToDestinationWithResponse(ctx context.Context, body CheckConnectionToDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationResponse, error) {
	rsp, err := c.CheckConnectionToDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationResponse(rsp)
}

// CheckConnectionToDestinationForUpdateWithBodyWithResponse request with arbitrary body returning *CheckConnectionToDestinationForUpdateResponse
func (c *ClientWithResponses) CheckConnectionToDestinationForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToDestinationForUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationForUpdateResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToDestinationForUpdateWithResponse(ctx context.Context, body CheckConnectionToDestinationForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToDestinationForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToDestinationForUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToDestinationForUpdateResponse(rsp)
}

// CreateDestinationWithBodyWithResponse request with arbitrary body returning *CreateDestinationResponse
func (c *ClientWithResponses) CreateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error) {
	rsp, err := c.CreateDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationResponse(rsp)
}

func (c *ClientWithResponses) CreateDestinationWithResponse(ctx context.Context, body CreateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDestinationResponse, error) {
	rsp, err := c.CreateDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDestinationResponse(rsp)
}

// DeleteDestinationWithBodyWithResponse request with arbitrary body returning *DeleteDestinationResponse
func (c *ClientWithResponses) DeleteDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error) {
	rsp, err := c.DeleteDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDestinationResponse(rsp)
}

func (c *ClientWithResponses) DeleteDestinationWithResponse(ctx context.Context, body DeleteDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteDestinationResponse, error) {
	rsp, err := c.DeleteDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDestinationResponse(rsp)
}

// GetDestinationWithBodyWithResponse request with arbitrary body returning *GetDestinationResponse
func (c *ClientWithResponses) GetDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error) {
	rsp, err := c.GetDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationResponse(rsp)
}

func (c *ClientWithResponses) GetDestinationWithResponse(ctx context.Context, body GetDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetDestinationResponse, error) {
	rsp, err := c.GetDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDestinationResponse(rsp)
}

// ListDestinationsForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListDestinationsForWorkspaceResponse
func (c *ClientWithResponses) ListDestinationsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error) {
	rsp, err := c.ListDestinationsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDestinationsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListDestinationsForWorkspaceWithResponse(ctx context.Context, body ListDestinationsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListDestinationsForWorkspaceResponse, error) {
	rsp, err := c.ListDestinationsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDestinationsForWorkspaceResponse(rsp)
}

// SearchDestinationsWithBodyWithResponse request with arbitrary body returning *SearchDestinationsResponse
func (c *ClientWithResponses) SearchDestinationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchDestinationsResponse, error) {
	rsp, err := c.SearchDestinationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDestinationsResponse(rsp)
}

func (c *ClientWithResponses) SearchDestinationsWithResponse(ctx context.Context, body SearchDestinationsJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchDestinationsResponse, error) {
	rsp, err := c.SearchDestinations(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchDestinationsResponse(rsp)
}

// UpdateDestinationWithBodyWithResponse request with arbitrary body returning *UpdateDestinationResponse
func (c *ClientWithResponses) UpdateDestinationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error) {
	rsp, err := c.UpdateDestinationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationResponse(rsp)
}

func (c *ClientWithResponses) UpdateDestinationWithResponse(ctx context.Context, body UpdateDestinationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDestinationResponse, error) {
	rsp, err := c.UpdateDestination(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDestinationResponse(rsp)
}

// GetHealthCheckWithResponse request returning *GetHealthCheckResponse
func (c *ClientWithResponses) GetHealthCheckWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthCheckResponse, error) {
	rsp, err := c.GetHealthCheck(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthCheckResponse(rsp)
}

// CancelJobWithBodyWithResponse request with arbitrary body returning *CancelJobResponse
func (c *ClientWithResponses) CancelJobWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CancelJobResponse, error) {
	rsp, err := c.CancelJobWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelJobResponse(rsp)
}

func (c *ClientWithResponses) CancelJobWithResponse(ctx context.Context, body CancelJobJSONRequestBody, reqEditors ...RequestEditorFn) (*CancelJobResponse, error) {
	rsp, err := c.CancelJob(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCancelJobResponse(rsp)
}

// GetJobInfoWithBodyWithResponse request with arbitrary body returning *GetJobInfoResponse
func (c *ClientWithResponses) GetJobInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error) {
	rsp, err := c.GetJobInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobInfoResponse(rsp)
}

func (c *ClientWithResponses) GetJobInfoWithResponse(ctx context.Context, body GetJobInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetJobInfoResponse, error) {
	rsp, err := c.GetJobInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobInfoResponse(rsp)
}

// GetJobDebugInfoWithBodyWithResponse request with arbitrary body returning *GetJobDebugInfoResponse
func (c *ClientWithResponses) GetJobDebugInfoWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetJobDebugInfoResponse, error) {
	rsp, err := c.GetJobDebugInfoWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobDebugInfoResponse(rsp)
}

func (c *ClientWithResponses) GetJobDebugInfoWithResponse(ctx context.Context, body GetJobDebugInfoJSONRequestBody, reqEditors ...RequestEditorFn) (*GetJobDebugInfoResponse, error) {
	rsp, err := c.GetJobDebugInfo(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetJobDebugInfoResponse(rsp)
}

// ListJobsForWithBodyWithResponse request with arbitrary body returning *ListJobsForResponse
func (c *ClientWithResponses) ListJobsForWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error) {
	rsp, err := c.ListJobsForWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobsForResponse(rsp)
}

func (c *ClientWithResponses) ListJobsForWithResponse(ctx context.Context, body ListJobsForJSONRequestBody, reqEditors ...RequestEditorFn) (*ListJobsForResponse, error) {
	rsp, err := c.ListJobsFor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListJobsForResponse(rsp)
}

// GetLogsWithBodyWithResponse request with arbitrary body returning *GetLogsResponse
func (c *ClientWithResponses) GetLogsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetLogsResponse, error) {
	rsp, err := c.GetLogsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogsResponse(rsp)
}

func (c *ClientWithResponses) GetLogsWithResponse(ctx context.Context, body GetLogsJSONRequestBody, reqEditors ...RequestEditorFn) (*GetLogsResponse, error) {
	rsp, err := c.GetLogs(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetLogsResponse(rsp)
}

// TryNotificationConfigWithBodyWithResponse request with arbitrary body returning *TryNotificationConfigResponse
func (c *ClientWithResponses) TryNotificationConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error) {
	rsp, err := c.TryNotificationConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTryNotificationConfigResponse(rsp)
}

func (c *ClientWithResponses) TryNotificationConfigWithResponse(ctx context.Context, body TryNotificationConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*TryNotificationConfigResponse, error) {
	rsp, err := c.TryNotificationConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTryNotificationConfigResponse(rsp)
}

// GetOpenApiSpecWithResponse request returning *GetOpenApiSpecResponse
func (c *ClientWithResponses) GetOpenApiSpecWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOpenApiSpecResponse, error) {
	rsp, err := c.GetOpenApiSpec(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOpenApiSpecResponse(rsp)
}

// CheckOperationWithBodyWithResponse request with arbitrary body returning *CheckOperationResponse
func (c *ClientWithResponses) CheckOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error) {
	rsp, err := c.CheckOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckOperationResponse(rsp)
}

func (c *ClientWithResponses) CheckOperationWithResponse(ctx context.Context, body CheckOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckOperationResponse, error) {
	rsp, err := c.CheckOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckOperationResponse(rsp)
}

// CreateOperationWithBodyWithResponse request with arbitrary body returning *CreateOperationResponse
func (c *ClientWithResponses) CreateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error) {
	rsp, err := c.CreateOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOperationResponse(rsp)
}

func (c *ClientWithResponses) CreateOperationWithResponse(ctx context.Context, body CreateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOperationResponse, error) {
	rsp, err := c.CreateOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOperationResponse(rsp)
}

// DeleteOperationWithBodyWithResponse request with arbitrary body returning *DeleteOperationResponse
func (c *ClientWithResponses) DeleteOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error) {
	rsp, err := c.DeleteOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOperationResponse(rsp)
}

func (c *ClientWithResponses) DeleteOperationWithResponse(ctx context.Context, body DeleteOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteOperationResponse, error) {
	rsp, err := c.DeleteOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOperationResponse(rsp)
}

// GetOperationWithBodyWithResponse request with arbitrary body returning *GetOperationResponse
func (c *ClientWithResponses) GetOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetOperationResponse, error) {
	rsp, err := c.GetOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOperationResponse(rsp)
}

func (c *ClientWithResponses) GetOperationWithResponse(ctx context.Context, body GetOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetOperationResponse, error) {
	rsp, err := c.GetOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOperationResponse(rsp)
}

// ListOperationsForConnectionWithBodyWithResponse request with arbitrary body returning *ListOperationsForConnectionResponse
func (c *ClientWithResponses) ListOperationsForConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error) {
	rsp, err := c.ListOperationsForConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOperationsForConnectionResponse(rsp)
}

func (c *ClientWithResponses) ListOperationsForConnectionWithResponse(ctx context.Context, body ListOperationsForConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ListOperationsForConnectionResponse, error) {
	rsp, err := c.ListOperationsForConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOperationsForConnectionResponse(rsp)
}

// UpdateOperationWithBodyWithResponse request with arbitrary body returning *UpdateOperationResponse
func (c *ClientWithResponses) UpdateOperationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error) {
	rsp, err := c.UpdateOperationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperationResponse(rsp)
}

func (c *ClientWithResponses) UpdateOperationWithResponse(ctx context.Context, body UpdateOperationJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateOperationResponse, error) {
	rsp, err := c.UpdateOperation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOperationResponse(rsp)
}

// ExecuteDestinationCheckConnectionWithBodyWithResponse request with arbitrary body returning *ExecuteDestinationCheckConnectionResponse
func (c *ClientWithResponses) ExecuteDestinationCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error) {
	rsp, err := c.ExecuteDestinationCheckConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteDestinationCheckConnectionResponse(rsp)
}

func (c *ClientWithResponses) ExecuteDestinationCheckConnectionWithResponse(ctx context.Context, body ExecuteDestinationCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteDestinationCheckConnectionResponse, error) {
	rsp, err := c.ExecuteDestinationCheckConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteDestinationCheckConnectionResponse(rsp)
}

// ExecuteSourceCheckConnectionWithBodyWithResponse request with arbitrary body returning *ExecuteSourceCheckConnectionResponse
func (c *ClientWithResponses) ExecuteSourceCheckConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error) {
	rsp, err := c.ExecuteSourceCheckConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceCheckConnectionResponse(rsp)
}

func (c *ClientWithResponses) ExecuteSourceCheckConnectionWithResponse(ctx context.Context, body ExecuteSourceCheckConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceCheckConnectionResponse, error) {
	rsp, err := c.ExecuteSourceCheckConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceCheckConnectionResponse(rsp)
}

// ExecuteSourceDiscoverSchemaWithBodyWithResponse request with arbitrary body returning *ExecuteSourceDiscoverSchemaResponse
func (c *ClientWithResponses) ExecuteSourceDiscoverSchemaWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error) {
	rsp, err := c.ExecuteSourceDiscoverSchemaWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceDiscoverSchemaResponse(rsp)
}

func (c *ClientWithResponses) ExecuteSourceDiscoverSchemaWithResponse(ctx context.Context, body ExecuteSourceDiscoverSchemaJSONRequestBody, reqEditors ...RequestEditorFn) (*ExecuteSourceDiscoverSchemaResponse, error) {
	rsp, err := c.ExecuteSourceDiscoverSchema(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseExecuteSourceDiscoverSchemaResponse(rsp)
}

// GetSourceDefinitionSpecificationWithBodyWithResponse request with arbitrary body returning *GetSourceDefinitionSpecificationResponse
func (c *ClientWithResponses) GetSourceDefinitionSpecificationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error) {
	rsp, err := c.GetSourceDefinitionSpecificationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionSpecificationResponse(rsp)
}

func (c *ClientWithResponses) GetSourceDefinitionSpecificationWithResponse(ctx context.Context, body GetSourceDefinitionSpecificationJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionSpecificationResponse, error) {
	rsp, err := c.GetSourceDefinitionSpecification(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionSpecificationResponse(rsp)
}

// CreateSourceDefinitionWithBodyWithResponse request with arbitrary body returning *CreateSourceDefinitionResponse
func (c *ClientWithResponses) CreateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error) {
	rsp, err := c.CreateSourceDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) CreateSourceDefinitionWithResponse(ctx context.Context, body CreateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceDefinitionResponse, error) {
	rsp, err := c.CreateSourceDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceDefinitionResponse(rsp)
}

// DeleteSourceDefinitionWithBodyWithResponse request with arbitrary body returning *DeleteSourceDefinitionResponse
func (c *ClientWithResponses) DeleteSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSourceDefinitionResponse, error) {
	rsp, err := c.DeleteSourceDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) DeleteSourceDefinitionWithResponse(ctx context.Context, body DeleteSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSourceDefinitionResponse, error) {
	rsp, err := c.DeleteSourceDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSourceDefinitionResponse(rsp)
}

// GetSourceDefinitionWithBodyWithResponse request with arbitrary body returning *GetSourceDefinitionResponse
func (c *ClientWithResponses) GetSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error) {
	rsp, err := c.GetSourceDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) GetSourceDefinitionWithResponse(ctx context.Context, body GetSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceDefinitionResponse, error) {
	rsp, err := c.GetSourceDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceDefinitionResponse(rsp)
}

// ListSourceDefinitionsWithResponse request returning *ListSourceDefinitionsResponse
func (c *ClientWithResponses) ListSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListSourceDefinitionsResponse, error) {
	rsp, err := c.ListSourceDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourceDefinitionsResponse(rsp)
}

// ListLatestSourceDefinitionsWithResponse request returning *ListLatestSourceDefinitionsResponse
func (c *ClientWithResponses) ListLatestSourceDefinitionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListLatestSourceDefinitionsResponse, error) {
	rsp, err := c.ListLatestSourceDefinitions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListLatestSourceDefinitionsResponse(rsp)
}

// UpdateSourceDefinitionWithBodyWithResponse request with arbitrary body returning *UpdateSourceDefinitionResponse
func (c *ClientWithResponses) UpdateSourceDefinitionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error) {
	rsp, err := c.UpdateSourceDefinitionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceDefinitionResponse(rsp)
}

func (c *ClientWithResponses) UpdateSourceDefinitionWithResponse(ctx context.Context, body UpdateSourceDefinitionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceDefinitionResponse, error) {
	rsp, err := c.UpdateSourceDefinition(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceDefinitionResponse(rsp)
}

// CompleteSourceOAuthWithBodyWithResponse request with arbitrary body returning *CompleteSourceOAuthResponse
func (c *ClientWithResponses) CompleteSourceOAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CompleteSourceOAuthResponse, error) {
	rsp, err := c.CompleteSourceOAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteSourceOAuthResponse(rsp)
}

func (c *ClientWithResponses) CompleteSourceOAuthWithResponse(ctx context.Context, body CompleteSourceOAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*CompleteSourceOAuthResponse, error) {
	rsp, err := c.CompleteSourceOAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCompleteSourceOAuthResponse(rsp)
}

// GetSourceOAuthConsentWithBodyWithResponse request with arbitrary body returning *GetSourceOAuthConsentResponse
func (c *ClientWithResponses) GetSourceOAuthConsentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceOAuthConsentResponse, error) {
	rsp, err := c.GetSourceOAuthConsentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceOAuthConsentResponse(rsp)
}

func (c *ClientWithResponses) GetSourceOAuthConsentWithResponse(ctx context.Context, body GetSourceOAuthConsentJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceOAuthConsentResponse, error) {
	rsp, err := c.GetSourceOAuthConsent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceOAuthConsentResponse(rsp)
}

// SetInstancewideSourceOauthParamsWithBodyWithResponse request with arbitrary body returning *SetInstancewideSourceOauthParamsResponse
func (c *ClientWithResponses) SetInstancewideSourceOauthParamsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SetInstancewideSourceOauthParamsResponse, error) {
	rsp, err := c.SetInstancewideSourceOauthParamsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetInstancewideSourceOauthParamsResponse(rsp)
}

func (c *ClientWithResponses) SetInstancewideSourceOauthParamsWithResponse(ctx context.Context, body SetInstancewideSourceOauthParamsJSONRequestBody, reqEditors ...RequestEditorFn) (*SetInstancewideSourceOauthParamsResponse, error) {
	rsp, err := c.SetInstancewideSourceOauthParams(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSetInstancewideSourceOauthParamsResponse(rsp)
}

// CheckConnectionToSourceWithBodyWithResponse request with arbitrary body returning *CheckConnectionToSourceResponse
func (c *ClientWithResponses) CheckConnectionToSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error) {
	rsp, err := c.CheckConnectionToSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToSourceWithResponse(ctx context.Context, body CheckConnectionToSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceResponse, error) {
	rsp, err := c.CheckConnectionToSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceResponse(rsp)
}

// CheckConnectionToSourceForUpdateWithBodyWithResponse request with arbitrary body returning *CheckConnectionToSourceForUpdateResponse
func (c *ClientWithResponses) CheckConnectionToSourceForUpdateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToSourceForUpdateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceForUpdateResponse(rsp)
}

func (c *ClientWithResponses) CheckConnectionToSourceForUpdateWithResponse(ctx context.Context, body CheckConnectionToSourceForUpdateJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckConnectionToSourceForUpdateResponse, error) {
	rsp, err := c.CheckConnectionToSourceForUpdate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckConnectionToSourceForUpdateResponse(rsp)
}

// CreateSourceWithBodyWithResponse request with arbitrary body returning *CreateSourceResponse
func (c *ClientWithResponses) CreateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error) {
	rsp, err := c.CreateSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceResponse(rsp)
}

func (c *ClientWithResponses) CreateSourceWithResponse(ctx context.Context, body CreateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSourceResponse, error) {
	rsp, err := c.CreateSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSourceResponse(rsp)
}

// DeleteSourceWithBodyWithResponse request with arbitrary body returning *DeleteSourceResponse
func (c *ClientWithResponses) DeleteSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error) {
	rsp, err := c.DeleteSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSourceResponse(rsp)
}

func (c *ClientWithResponses) DeleteSourceWithResponse(ctx context.Context, body DeleteSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSourceResponse, error) {
	rsp, err := c.DeleteSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSourceResponse(rsp)
}

// DiscoverSchemaForSourceWithBodyWithResponse request with arbitrary body returning *DiscoverSchemaForSourceResponse
func (c *ClientWithResponses) DiscoverSchemaForSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error) {
	rsp, err := c.DiscoverSchemaForSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiscoverSchemaForSourceResponse(rsp)
}

func (c *ClientWithResponses) DiscoverSchemaForSourceWithResponse(ctx context.Context, body DiscoverSchemaForSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*DiscoverSchemaForSourceResponse, error) {
	rsp, err := c.DiscoverSchemaForSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDiscoverSchemaForSourceResponse(rsp)
}

// GetSourceWithBodyWithResponse request with arbitrary body returning *GetSourceResponse
func (c *ClientWithResponses) GetSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetSourceResponse, error) {
	rsp, err := c.GetSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceResponse(rsp)
}

func (c *ClientWithResponses) GetSourceWithResponse(ctx context.Context, body GetSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetSourceResponse, error) {
	rsp, err := c.GetSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSourceResponse(rsp)
}

// ListSourcesForWorkspaceWithBodyWithResponse request with arbitrary body returning *ListSourcesForWorkspaceResponse
func (c *ClientWithResponses) ListSourcesForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error) {
	rsp, err := c.ListSourcesForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourcesForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) ListSourcesForWorkspaceWithResponse(ctx context.Context, body ListSourcesForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*ListSourcesForWorkspaceResponse, error) {
	rsp, err := c.ListSourcesForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSourcesForWorkspaceResponse(rsp)
}

// SearchSourcesWithBodyWithResponse request with arbitrary body returning *SearchSourcesResponse
func (c *ClientWithResponses) SearchSourcesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*SearchSourcesResponse, error) {
	rsp, err := c.SearchSourcesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSourcesResponse(rsp)
}

func (c *ClientWithResponses) SearchSourcesWithResponse(ctx context.Context, body SearchSourcesJSONRequestBody, reqEditors ...RequestEditorFn) (*SearchSourcesResponse, error) {
	rsp, err := c.SearchSources(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchSourcesResponse(rsp)
}

// UpdateSourceWithBodyWithResponse request with arbitrary body returning *UpdateSourceResponse
func (c *ClientWithResponses) UpdateSourceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error) {
	rsp, err := c.UpdateSourceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceResponse(rsp)
}

func (c *ClientWithResponses) UpdateSourceWithResponse(ctx context.Context, body UpdateSourceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSourceResponse, error) {
	rsp, err := c.UpdateSource(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSourceResponse(rsp)
}

// GetStateWithBodyWithResponse request with arbitrary body returning *GetStateResponse
func (c *ClientWithResponses) GetStateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetStateResponse, error) {
	rsp, err := c.GetStateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStateResponse(rsp)
}

func (c *ClientWithResponses) GetStateWithResponse(ctx context.Context, body GetStateJSONRequestBody, reqEditors ...RequestEditorFn) (*GetStateResponse, error) {
	rsp, err := c.GetState(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStateResponse(rsp)
}

// WebBackendCreateConnectionWithBodyWithResponse request with arbitrary body returning *WebBackendCreateConnectionResponse
func (c *ClientWithResponses) WebBackendCreateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error) {
	rsp, err := c.WebBackendCreateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendCreateConnectionResponse(rsp)
}

func (c *ClientWithResponses) WebBackendCreateConnectionWithResponse(ctx context.Context, body WebBackendCreateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendCreateConnectionResponse, error) {
	rsp, err := c.WebBackendCreateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendCreateConnectionResponse(rsp)
}

// WebBackendGetConnectionWithBodyWithResponse request with arbitrary body returning *WebBackendGetConnectionResponse
func (c *ClientWithResponses) WebBackendGetConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error) {
	rsp, err := c.WebBackendGetConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendGetConnectionResponse(rsp)
}

func (c *ClientWithResponses) WebBackendGetConnectionWithResponse(ctx context.Context, body WebBackendGetConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendGetConnectionResponse, error) {
	rsp, err := c.WebBackendGetConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendGetConnectionResponse(rsp)
}

// WebBackendListConnectionsForWorkspaceWithBodyWithResponse request with arbitrary body returning *WebBackendListConnectionsForWorkspaceResponse
func (c *ClientWithResponses) WebBackendListConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.WebBackendListConnectionsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendListConnectionsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) WebBackendListConnectionsForWorkspaceWithResponse(ctx context.Context, body WebBackendListConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendListConnectionsForWorkspaceResponse, error) {
	rsp, err := c.WebBackendListConnectionsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendListConnectionsForWorkspaceResponse(rsp)
}

// WebBackendListAllConnectionsForWorkspaceWithBodyWithResponse request with arbitrary body returning *WebBackendListAllConnectionsForWorkspaceResponse
func (c *ClientWithResponses) WebBackendListAllConnectionsForWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendListAllConnectionsForWorkspaceResponse, error) {
	rsp, err := c.WebBackendListAllConnectionsForWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendListAllConnectionsForWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) WebBackendListAllConnectionsForWorkspaceWithResponse(ctx context.Context, body WebBackendListAllConnectionsForWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendListAllConnectionsForWorkspaceResponse, error) {
	rsp, err := c.WebBackendListAllConnectionsForWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendListAllConnectionsForWorkspaceResponse(rsp)
}

// WebBackendSearchConnectionsWithBodyWithResponse request with arbitrary body returning *WebBackendSearchConnectionsResponse
func (c *ClientWithResponses) WebBackendSearchConnectionsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendSearchConnectionsResponse, error) {
	rsp, err := c.WebBackendSearchConnectionsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendSearchConnectionsResponse(rsp)
}

func (c *ClientWithResponses) WebBackendSearchConnectionsWithResponse(ctx context.Context, body WebBackendSearchConnectionsJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendSearchConnectionsResponse, error) {
	rsp, err := c.WebBackendSearchConnections(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendSearchConnectionsResponse(rsp)
}

// WebBackendUpdateConnectionWithBodyWithResponse request with arbitrary body returning *WebBackendUpdateConnectionResponse
func (c *ClientWithResponses) WebBackendUpdateConnectionWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error) {
	rsp, err := c.WebBackendUpdateConnectionWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendUpdateConnectionResponse(rsp)
}

func (c *ClientWithResponses) WebBackendUpdateConnectionWithResponse(ctx context.Context, body WebBackendUpdateConnectionJSONRequestBody, reqEditors ...RequestEditorFn) (*WebBackendUpdateConnectionResponse, error) {
	rsp, err := c.WebBackendUpdateConnection(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseWebBackendUpdateConnectionResponse(rsp)
}

// CreateWorkspaceWithBodyWithResponse request with arbitrary body returning *CreateWorkspaceResponse
func (c *ClientWithResponses) CreateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) CreateWorkspaceWithResponse(ctx context.Context, body CreateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateWorkspaceResponse, error) {
	rsp, err := c.CreateWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateWorkspaceResponse(rsp)
}

// DeleteWorkspaceWithBodyWithResponse request with arbitrary body returning *DeleteWorkspaceResponse
func (c *ClientWithResponses) DeleteWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) DeleteWorkspaceWithResponse(ctx context.Context, body DeleteWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteWorkspaceResponse, error) {
	rsp, err := c.DeleteWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWorkspaceResponse(rsp)
}

// GetWorkspaceWithBodyWithResponse request with arbitrary body returning *GetWorkspaceResponse
func (c *ClientWithResponses) GetWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) GetWorkspaceWithResponse(ctx context.Context, body GetWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceResponse, error) {
	rsp, err := c.GetWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceResponse(rsp)
}

// GetWorkspaceBySlugWithBodyWithResponse request with arbitrary body returning *GetWorkspaceBySlugResponse
func (c *ClientWithResponses) GetWorkspaceBySlugWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error) {
	rsp, err := c.GetWorkspaceBySlugWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceBySlugResponse(rsp)
}

func (c *ClientWithResponses) GetWorkspaceBySlugWithResponse(ctx context.Context, body GetWorkspaceBySlugJSONRequestBody, reqEditors ...RequestEditorFn) (*GetWorkspaceBySlugResponse, error) {
	rsp, err := c.GetWorkspaceBySlug(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWorkspaceBySlugResponse(rsp)
}

// ListWorkspacesWithResponse request returning *ListWorkspacesResponse
func (c *ClientWithResponses) ListWorkspacesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*ListWorkspacesResponse, error) {
	rsp, err := c.ListWorkspaces(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListWorkspacesResponse(rsp)
}

// UpdateWorkspaceFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceFeedbackResponse
func (c *ClientWithResponses) UpdateWorkspaceFeedbackWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceFeedbackResponse, error) {
	rsp, err := c.UpdateWorkspaceFeedbackWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceFeedbackResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceFeedbackWithResponse(ctx context.Context, body UpdateWorkspaceFeedbackJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceFeedbackResponse, error) {
	rsp, err := c.UpdateWorkspaceFeedback(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceFeedbackResponse(rsp)
}

// UpdateWorkspaceWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceResponse
func (c *ClientWithResponses) UpdateWorkspaceWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspaceWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceWithResponse(ctx context.Context, body UpdateWorkspaceJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceResponse, error) {
	rsp, err := c.UpdateWorkspace(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceResponse(rsp)
}

// UpdateWorkspaceNameWithBodyWithResponse request with arbitrary body returning *UpdateWorkspaceNameResponse
func (c *ClientWithResponses) UpdateWorkspaceNameWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateWorkspaceNameResponse, error) {
	rsp, err := c.UpdateWorkspaceNameWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceNameResponse(rsp)
}

func (c *ClientWithResponses) UpdateWorkspaceNameWithResponse(ctx context.Context, body UpdateWorkspaceNameJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateWorkspaceNameResponse, error) {
	rsp, err := c.UpdateWorkspaceName(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateWorkspaceNameResponse(rsp)
}

// ParseCreateConnectionResponse parses an HTTP response from a CreateConnectionWithResponse call
func ParseCreateConnectionResponse(rsp *http.Response) (*CreateConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteConnectionResponse parses an HTTP response from a DeleteConnectionWithResponse call
func ParseDeleteConnectionResponse(rsp *http.Response) (*DeleteConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetConnectionResponse parses an HTTP response from a GetConnectionWithResponse call
func ParseGetConnectionResponse(rsp *http.Response) (*GetConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListConnectionsForWorkspaceResponse parses an HTTP response from a ListConnectionsForWorkspaceWithResponse call
func ParseListConnectionsForWorkspaceResponse(rsp *http.Response) (*ListConnectionsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectionsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListAllConnectionsForWorkspaceResponse parses an HTTP response from a ListAllConnectionsForWorkspaceWithResponse call
func ParseListAllConnectionsForWorkspaceResponse(rsp *http.Response) (*ListAllConnectionsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllConnectionsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseResetConnectionResponse parses an HTTP response from a ResetConnectionWithResponse call
func ParseResetConnectionResponse(rsp *http.Response) (*ResetConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ResetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSearchConnectionsResponse parses an HTTP response from a SearchConnectionsWithResponse call
func ParseSearchConnectionsResponse(rsp *http.Response) (*SearchConnectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSyncConnectionResponse parses an HTTP response from a SyncConnectionWithResponse call
func ParseSyncConnectionResponse(rsp *http.Response) (*SyncConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SyncConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateConnectionResponse parses an HTTP response from a UpdateConnectionWithResponse call
func ParseUpdateConnectionResponse(rsp *http.Response) (*UpdateConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListMigrationsResponse parses an HTTP response from a ListMigrationsWithResponse call
func ParseListMigrationsResponse(rsp *http.Response) (*ListMigrationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMigrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DbMigrationReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExecuteMigrationsResponse parses an HTTP response from a ExecuteMigrationsWithResponse call
func ParseExecuteMigrationsResponse(rsp *http.Response) (*ExecuteMigrationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteMigrationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DbMigrationExecutionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExportArchiveResponse parses an HTTP response from a ExportArchiveWithResponse call
func ParseExportArchiveResponse(rsp *http.Response) (*ExportArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseExportWorkspaceResponse parses an HTTP response from a ExportWorkspaceWithResponse call
func ParseExportWorkspaceResponse(rsp *http.Response) (*ExportWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExportWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseImportArchiveResponse parses an HTTP response from a ImportArchiveWithResponse call
func ParseImportArchiveResponse(rsp *http.Response) (*ImportArchiveResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportArchiveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseImportIntoWorkspaceResponse parses an HTTP response from a ImportIntoWorkspaceWithResponse call
func ParseImportIntoWorkspaceResponse(rsp *http.Response) (*ImportIntoWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ImportIntoWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ImportRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUploadArchiveResourceResponse parses an HTTP response from a UploadArchiveResourceWithResponse call
func ParseUploadArchiveResourceResponse(rsp *http.Response) (*UploadArchiveResourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadArchiveResourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UploadRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDestinationDefinitionSpecificationResponse parses an HTTP response from a GetDestinationDefinitionSpecificationWithResponse call
func ParseGetDestinationDefinitionSpecificationResponse(rsp *http.Response) (*GetDestinationDefinitionSpecificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationDefinitionSpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionSpecificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateDestinationDefinitionResponse parses an HTTP response from a CreateDestinationDefinitionWithResponse call
func ParseCreateDestinationDefinitionResponse(rsp *http.Response) (*CreateDestinationDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDestinationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteDestinationDefinitionResponse parses an HTTP response from a DeleteDestinationDefinitionWithResponse call
func ParseDeleteDestinationDefinitionResponse(rsp *http.Response) (*DeleteDestinationDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDestinationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDestinationDefinitionResponse parses an HTTP response from a GetDestinationDefinitionWithResponse call
func ParseGetDestinationDefinitionResponse(rsp *http.Response) (*GetDestinationDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListDestinationDefinitionsResponse parses an HTTP response from a ListDestinationDefinitionsWithResponse call
func ParseListDestinationDefinitionsResponse(rsp *http.Response) (*ListDestinationDefinitionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDestinationDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLatestDestinationDefinitionsResponse parses an HTTP response from a ListLatestDestinationDefinitionsWithResponse call
func ParseListLatestDestinationDefinitionsResponse(rsp *http.Response) (*ListLatestDestinationDefinitionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLatestDestinationDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateDestinationDefinitionResponse parses an HTTP response from a UpdateDestinationDefinitionWithResponse call
func ParseUpdateDestinationDefinitionResponse(rsp *http.Response) (*UpdateDestinationDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDestinationDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCompleteDestinationOAuthResponse parses an HTTP response from a CompleteDestinationOAuthWithResponse call
func ParseCompleteDestinationOAuthResponse(rsp *http.Response) (*CompleteDestinationOAuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteDestinationOAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompleteOAuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDestinationOAuthConsentResponse parses an HTTP response from a GetDestinationOAuthConsentWithResponse call
func ParseGetDestinationOAuthConsentResponse(rsp *http.Response) (*GetDestinationOAuthConsentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationOAuthConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuthConsentRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetInstancewideDestinationOauthParamsResponse parses an HTTP response from a SetInstancewideDestinationOauthParamsWithResponse call
func ParseSetInstancewideDestinationOauthParamsResponse(rsp *http.Response) (*SetInstancewideDestinationOauthParamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetInstancewideDestinationOauthParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest KnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToDestinationResponse parses an HTTP response from a CheckConnectionToDestinationWithResponse call
func ParseCheckConnectionToDestinationResponse(rsp *http.Response) (*CheckConnectionToDestinationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToDestinationForUpdateResponse parses an HTTP response from a CheckConnectionToDestinationForUpdateWithResponse call
func ParseCheckConnectionToDestinationForUpdateResponse(rsp *http.Response) (*CheckConnectionToDestinationForUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToDestinationForUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateDestinationResponse parses an HTTP response from a CreateDestinationWithResponse call
func ParseCreateDestinationResponse(rsp *http.Response) (*CreateDestinationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteDestinationResponse parses an HTTP response from a DeleteDestinationWithResponse call
func ParseDeleteDestinationResponse(rsp *http.Response) (*DeleteDestinationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetDestinationResponse parses an HTTP response from a GetDestinationWithResponse call
func ParseGetDestinationResponse(rsp *http.Response) (*GetDestinationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListDestinationsForWorkspaceResponse parses an HTTP response from a ListDestinationsForWorkspaceWithResponse call
func ParseListDestinationsForWorkspaceResponse(rsp *http.Response) (*ListDestinationsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDestinationsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSearchDestinationsResponse parses an HTTP response from a SearchDestinationsWithResponse call
func ParseSearchDestinationsResponse(rsp *http.Response) (*SearchDestinationsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchDestinationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateDestinationResponse parses an HTTP response from a UpdateDestinationWithResponse call
func ParseUpdateDestinationResponse(rsp *http.Response) (*UpdateDestinationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDestinationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DestinationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetHealthCheckResponse parses an HTTP response from a GetHealthCheckWithResponse call
func ParseGetHealthCheckResponse(rsp *http.Response) (*GetHealthCheckResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthCheckResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HealthCheckRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCancelJobResponse parses an HTTP response from a CancelJobWithResponse call
func ParseCancelJobResponse(rsp *http.Response) (*CancelJobResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CancelJobResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetJobInfoResponse parses an HTTP response from a GetJobInfoWithResponse call
func ParseGetJobInfoResponse(rsp *http.Response) (*GetJobInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetJobDebugInfoResponse parses an HTTP response from a GetJobDebugInfoWithResponse call
func ParseGetJobDebugInfoResponse(rsp *http.Response) (*GetJobDebugInfoResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetJobDebugInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobDebugInfoRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListJobsForResponse parses an HTTP response from a ListJobsForWithResponse call
func ParseListJobsForResponse(rsp *http.Response) (*ListJobsForResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListJobsForResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest JobReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetLogsResponse parses an HTTP response from a GetLogsWithResponse call
func ParseGetLogsResponse(rsp *http.Response) (*GetLogsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetLogsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseTryNotificationConfigResponse parses an HTTP response from a TryNotificationConfigWithResponse call
func ParseTryNotificationConfigResponse(rsp *http.Response) (*TryNotificationConfigResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TryNotificationConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOpenApiSpecResponse parses an HTTP response from a GetOpenApiSpecWithResponse call
func ParseGetOpenApiSpecResponse(rsp *http.Response) (*GetOpenApiSpecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOpenApiSpecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckOperationResponse parses an HTTP response from a CheckOperationWithResponse call
func ParseCheckOperationResponse(rsp *http.Response) (*CheckOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckOperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateOperationResponse parses an HTTP response from a CreateOperationWithResponse call
func ParseCreateOperationResponse(rsp *http.Response) (*CreateOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteOperationResponse parses an HTTP response from a DeleteOperationWithResponse call
func ParseDeleteOperationResponse(rsp *http.Response) (*DeleteOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetOperationResponse parses an HTTP response from a GetOperationWithResponse call
func ParseGetOperationResponse(rsp *http.Response) (*GetOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListOperationsForConnectionResponse parses an HTTP response from a ListOperationsForConnectionWithResponse call
func ParseListOperationsForConnectionResponse(rsp *http.Response) (*ListOperationsForConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOperationsForConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateOperationResponse parses an HTTP response from a UpdateOperationWithResponse call
func ParseUpdateOperationResponse(rsp *http.Response) (*UpdateOperationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOperationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OperationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExecuteDestinationCheckConnectionResponse parses an HTTP response from a ExecuteDestinationCheckConnectionWithResponse call
func ParseExecuteDestinationCheckConnectionResponse(rsp *http.Response) (*ExecuteDestinationCheckConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteDestinationCheckConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExecuteSourceCheckConnectionResponse parses an HTTP response from a ExecuteSourceCheckConnectionWithResponse call
func ParseExecuteSourceCheckConnectionResponse(rsp *http.Response) (*ExecuteSourceCheckConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteSourceCheckConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseExecuteSourceDiscoverSchemaResponse parses an HTTP response from a ExecuteSourceDiscoverSchemaWithResponse call
func ParseExecuteSourceDiscoverSchemaResponse(rsp *http.Response) (*ExecuteSourceDiscoverSchemaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ExecuteSourceDiscoverSchemaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDiscoverSchemaRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSourceDefinitionSpecificationResponse parses an HTTP response from a GetSourceDefinitionSpecificationWithResponse call
func ParseGetSourceDefinitionSpecificationResponse(rsp *http.Response) (*GetSourceDefinitionSpecificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceDefinitionSpecificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionSpecificationRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateSourceDefinitionResponse parses an HTTP response from a CreateSourceDefinitionWithResponse call
func ParseCreateSourceDefinitionResponse(rsp *http.Response) (*CreateSourceDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSourceDefinitionResponse parses an HTTP response from a DeleteSourceDefinitionWithResponse call
func ParseDeleteSourceDefinitionResponse(rsp *http.Response) (*DeleteSourceDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSourceDefinitionResponse parses an HTTP response from a GetSourceDefinitionWithResponse call
func ParseGetSourceDefinitionResponse(rsp *http.Response) (*GetSourceDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListSourceDefinitionsResponse parses an HTTP response from a ListSourceDefinitionsWithResponse call
func ParseListSourceDefinitionsResponse(rsp *http.Response) (*ListSourceDefinitionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSourceDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListLatestSourceDefinitionsResponse parses an HTTP response from a ListLatestSourceDefinitionsWithResponse call
func ParseListLatestSourceDefinitionsResponse(rsp *http.Response) (*ListLatestSourceDefinitionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListLatestSourceDefinitionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSourceDefinitionResponse parses an HTTP response from a UpdateSourceDefinitionWithResponse call
func ParseUpdateSourceDefinitionResponse(rsp *http.Response) (*UpdateSourceDefinitionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSourceDefinitionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDefinitionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCompleteSourceOAuthResponse parses an HTTP response from a CompleteSourceOAuthWithResponse call
func ParseCompleteSourceOAuthResponse(rsp *http.Response) (*CompleteSourceOAuthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CompleteSourceOAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CompleteOAuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSourceOAuthConsentResponse parses an HTTP response from a GetSourceOAuthConsentWithResponse call
func ParseGetSourceOAuthConsentResponse(rsp *http.Response) (*GetSourceOAuthConsentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceOAuthConsentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest OAuthConsentRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSetInstancewideSourceOauthParamsResponse parses an HTTP response from a SetInstancewideSourceOauthParamsWithResponse call
func ParseSetInstancewideSourceOauthParamsResponse(rsp *http.Response) (*SetInstancewideSourceOauthParamsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SetInstancewideSourceOauthParamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest KnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToSourceResponse parses an HTTP response from a CheckConnectionToSourceWithResponse call
func ParseCheckConnectionToSourceResponse(rsp *http.Response) (*CheckConnectionToSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCheckConnectionToSourceForUpdateResponse parses an HTTP response from a CheckConnectionToSourceForUpdateWithResponse call
func ParseCheckConnectionToSourceForUpdateResponse(rsp *http.Response) (*CheckConnectionToSourceForUpdateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckConnectionToSourceForUpdateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CheckConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateSourceResponse parses an HTTP response from a CreateSourceWithResponse call
func ParseCreateSourceResponse(rsp *http.Response) (*CreateSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteSourceResponse parses an HTTP response from a DeleteSourceWithResponse call
func ParseDeleteSourceResponse(rsp *http.Response) (*DeleteSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDiscoverSchemaForSourceResponse parses an HTTP response from a DiscoverSchemaForSourceWithResponse call
func ParseDiscoverSchemaForSourceResponse(rsp *http.Response) (*DiscoverSchemaForSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DiscoverSchemaForSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceDiscoverSchemaRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetSourceResponse parses an HTTP response from a GetSourceWithResponse call
func ParseGetSourceResponse(rsp *http.Response) (*GetSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListSourcesForWorkspaceResponse parses an HTTP response from a ListSourcesForWorkspaceWithResponse call
func ParseListSourcesForWorkspaceResponse(rsp *http.Response) (*ListSourcesForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSourcesForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseSearchSourcesResponse parses an HTTP response from a SearchSourcesWithResponse call
func ParseSearchSourcesResponse(rsp *http.Response) (*SearchSourcesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchSourcesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateSourceResponse parses an HTTP response from a UpdateSourceWithResponse call
func ParseUpdateSourceResponse(rsp *http.Response) (*UpdateSourceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSourceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SourceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetStateResponse parses an HTTP response from a GetStateWithResponse call
func ParseGetStateResponse(rsp *http.Response) (*GetStateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionState
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendCreateConnectionResponse parses an HTTP response from a WebBackendCreateConnectionWithResponse call
func ParseWebBackendCreateConnectionResponse(rsp *http.Response) (*WebBackendCreateConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendCreateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendGetConnectionResponse parses an HTTP response from a WebBackendGetConnectionWithResponse call
func ParseWebBackendGetConnectionResponse(rsp *http.Response) (*WebBackendGetConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendGetConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendListConnectionsForWorkspaceResponse parses an HTTP response from a WebBackendListConnectionsForWorkspaceWithResponse call
func ParseWebBackendListConnectionsForWorkspaceResponse(rsp *http.Response) (*WebBackendListConnectionsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendListConnectionsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendListAllConnectionsForWorkspaceResponse parses an HTTP response from a WebBackendListAllConnectionsForWorkspaceWithResponse call
func ParseWebBackendListAllConnectionsForWorkspaceResponse(rsp *http.Response) (*WebBackendListAllConnectionsForWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendListAllConnectionsForWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendSearchConnectionsResponse parses an HTTP response from a WebBackendSearchConnectionsWithResponse call
func ParseWebBackendSearchConnectionsResponse(rsp *http.Response) (*WebBackendSearchConnectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendSearchConnectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseWebBackendUpdateConnectionResponse parses an HTTP response from a WebBackendUpdateConnectionWithResponse call
func ParseWebBackendUpdateConnectionResponse(rsp *http.Response) (*WebBackendUpdateConnectionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &WebBackendUpdateConnectionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WebBackendConnectionRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseCreateWorkspaceResponse parses an HTTP response from a CreateWorkspaceWithResponse call
func ParseCreateWorkspaceResponse(rsp *http.Response) (*CreateWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseDeleteWorkspaceResponse parses an HTTP response from a DeleteWorkspaceWithResponse call
func ParseDeleteWorkspaceResponse(rsp *http.Response) (*DeleteWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceResponse parses an HTTP response from a GetWorkspaceWithResponse call
func ParseGetWorkspaceResponse(rsp *http.Response) (*GetWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseGetWorkspaceBySlugResponse parses an HTTP response from a GetWorkspaceBySlugWithResponse call
func ParseGetWorkspaceBySlugResponse(rsp *http.Response) (*GetWorkspaceBySlugResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWorkspaceBySlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseListWorkspacesResponse parses an HTTP response from a ListWorkspacesWithResponse call
func ParseListWorkspacesResponse(rsp *http.Response) (*ListWorkspacesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListWorkspacesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceReadList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceFeedbackResponse parses an HTTP response from a UpdateWorkspaceFeedbackWithResponse call
func ParseUpdateWorkspaceFeedbackResponse(rsp *http.Response) (*UpdateWorkspaceFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceResponse parses an HTTP response from a UpdateWorkspaceWithResponse call
func ParseUpdateWorkspaceResponse(rsp *http.Response) (*UpdateWorkspaceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

// ParseUpdateWorkspaceNameResponse parses an HTTP response from a UpdateWorkspaceNameWithResponse call
func ParseUpdateWorkspaceNameResponse(rsp *http.Response) (*UpdateWorkspaceNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateWorkspaceNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WorkspaceRead
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFoundKnownExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 422:
		var dest InvalidInputExceptionInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON422 = &dest

	}

	return response, nil
}

